
CCD Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a708  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a904  0800a904  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a90c  0800a90c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800a914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fec  200000fc  0800aa10  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050e8  0800aa10  000250e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f27  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003969  00000000  00000000  00038096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ffe  00000000  00000000  0003ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a65b  00000000  00000000  0003deae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0c9  00000000  00000000  00058509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d226  00000000  00000000  000725d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005744  00000000  00000000  0010f7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00114f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a884 	.word	0x0800a884

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800a884 	.word	0x0800a884

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <changeIntegrationTime>:
int sendStage = 0;
volatile int sendCCDDataFlag = 0;
volatile unsigned long int recieveIntegrationTime;
volatile int recieveIntegrationTimeFlag = 0;

void changeIntegrationTime(TIM_HandleTypeDef* sh, TIM_HandleTypeDef* icg, TIM_HandleTypeDef* mClock, TIM_HandleTypeDef* adcTimer, unsigned long int newTime) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0a4      	sub	sp, #144	; 0x90
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]

	//Creating sh signals whose periods are cut earlier or later to forcibly synchronize with the icg simply
	//messes up the true integration time. There is a possibility in making a variable period integration, however it seems like
	//that solution only messes up the true integration time.

	unsigned long int stretchFactor = 21; //Must be a min of 21
 80004de:	2315      	movs	r3, #21
 80004e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	unsigned long int icgPeriod = 7500;
 80004e4:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80004e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	if (newTime % 7500 == 0) {
 80004ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <changeIntegrationTime+0x90>)
 80004f2:	fba3 1302 	umull	r1, r3, r3, r2
 80004f6:	0adb      	lsrs	r3, r3, #11
 80004f8:	f641 514c 	movw	r1, #7500	; 0x1d4c
 80004fc:	fb01 f303 	mul.w	r3, r1, r3
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d10d      	bne.n	8000522 <changeIntegrationTime+0x52>
			stretchFactor = 21 * (newTime / icgPeriod);
 8000506:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800050a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800050e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	00da      	lsls	r2, r3, #3
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000520:	e03b      	b.n	800059a <changeIntegrationTime+0xca>
	} else if (newTime % 10000 == 0) {
 8000522:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <changeIntegrationTime+0x94>)
 8000528:	fba3 1302 	umull	r1, r3, r3, r2
 800052c:	0b5b      	lsrs	r3, r3, #13
 800052e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000532:	fb01 f303 	mul.w	r3, r1, r3
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d11a      	bne.n	8000572 <changeIntegrationTime+0xa2>
		icgPeriod = 10000;
 800053c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		stretchFactor = 21 * (newTime / icgPeriod);
 8000544:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800054c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	00da      	lsls	r2, r3, #3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800055e:	e01c      	b.n	800059a <changeIntegrationTime+0xca>
 8000560:	45e7b273 	.word	0x45e7b273
 8000564:	d1b71759 	.word	0xd1b71759
	} else {
		//Original Expression: icgPeriod * (stretchFactor * 4) % (newTime*84) != 0
		while (((icgPeriod *stretchFactor) % (newTime*21)) != 0) {
			stretchFactor++;
 8000568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800056c:	3301      	adds	r3, #1
 800056e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (((icgPeriod *stretchFactor) % (newTime*21)) != 0) {
 8000572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000576:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800057a:	fb03 f202 	mul.w	r2, r3, r2
 800057e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000582:	460b      	mov	r3, r1
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	440b      	add	r3, r1
 8000588:	00d9      	lsls	r1, r3, #3
 800058a:	1acb      	subs	r3, r1, r3
 800058c:	fbb2 f1f3 	udiv	r1, r2, r3
 8000590:	fb01 f303 	mul.w	r3, r1, r3
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1e6      	bne.n	8000568 <changeIntegrationTime+0x98>
		}
	}

	{	//Shift Gate Setup - htim5
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]

	  sh->Init.Period = (newTime)*84-1;
 80005ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80005b2:	2254      	movs	r2, #84	; 0x54
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	60da      	str	r2, [r3, #12]
	  sConfigOC.Pulse = (4)*84-1;
 80005be:	f240 134f 	movw	r3, #335	; 0x14f
 80005c2:	66bb      	str	r3, [r7, #104]	; 0x68

	  sh->Init.Prescaler = 0;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
	  sh->Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
	  sh->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
	  sh->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(sh) != HAL_OK) { Error_Handler(); }
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f004 f947 	bl	8004870 <HAL_TIM_Base_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <changeIntegrationTime+0x11c>
 80005e8:	f000 fd26 	bl	8001038 <Error_Handler>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ec:	2360      	movs	r3, #96	; 0x60
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f0:	2300      	movs	r3, #0
 80005f2:	66fb      	str	r3, [r7, #108]	; 0x6c
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	677b      	str	r3, [r7, #116]	; 0x74
	  if (HAL_TIM_PWM_ConfigChannel(sh, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) { Error_Handler(); }
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	2208      	movs	r2, #8
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f004 fbe1 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <changeIntegrationTime+0x140>
 800060c:	f000 fd14 	bl	8001038 <Error_Handler>
	  HAL_TIM_MspPostInit(sh);
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 fe17 	bl	8001244 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(sh, TIM_CHANNEL_3);
 8000616:	2108      	movs	r1, #8
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f004 fa35 	bl	8004a88 <HAL_TIM_PWM_Start>
	}

	{	//Integration Clear Gate Setup - htim2
		TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	619a      	str	r2, [r3, #24]

		icg->Init.Period = (icgPeriod)*(stretchFactor*4) - 1; //(stretchfactor*4) bc factoring
 8000632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000636:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800063a:	fb02 f303 	mul.w	r3, r2, r3
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	60da      	str	r2, [r3, #12]
		sConfigOC.Pulse = (10)*84-1;
 8000646:	f240 3347 	movw	r3, #839	; 0x347
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c

		icg->Init.Prescaler = 0;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
		icg->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
		icg->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
		icg->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(icg) != HAL_OK) { Error_Handler(); }
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f004 f903 	bl	8004870 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <changeIntegrationTime+0x1a4>
 8000670:	f000 fce2 	bl	8001038 <Error_Handler>
		if (HAL_TIM_Base_Start_IT(icg)) { Error_Handler(); }
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f004 f94b 	bl	8004910 <HAL_TIM_Base_Start_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <changeIntegrationTime+0x1b4>
 8000680:	f000 fcda 	bl	8001038 <Error_Handler>

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000688:	2302      	movs	r3, #2
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (HAL_TIM_PWM_ConfigChannel(icg, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8000690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f004 fb95 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <changeIntegrationTime+0x1d8>
 80006a4:	f000 fcc8 	bl	8001038 <Error_Handler>

		HAL_TIM_MspPostInit(icg);
 80006a8:	68b8      	ldr	r0, [r7, #8]
 80006aa:	f000 fdcb 	bl	8001244 <HAL_TIM_MspPostInit>

		HAL_TIM_PWM_Start(icg, TIM_CHANNEL_1); //PA0 - ICG
 80006ae:	2100      	movs	r1, #0
 80006b0:	68b8      	ldr	r0, [r7, #8]
 80006b2:	f004 f9e9 	bl	8004a88 <HAL_TIM_PWM_Start>
	}

	{	//Master Clock Setup htim3
		TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	619a      	str	r2, [r3, #24]

		unsigned long int pulse = 1*21;
 80006ca:	2315      	movs	r3, #21
 80006cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		mClock->Init.Period = (pulse)*2-1;
 80006d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]
		sConfigOC.Pulse = (pulse)-1;
 80006dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006e0:	3b01      	subs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30

		mClock->Init.Prescaler = 0;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
		mClock->Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
		mClock->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
		mClock->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(mClock) != HAL_OK) { Error_Handler(); }
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f004 f8b7 	bl	8004870 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <changeIntegrationTime+0x23c>
 8000708:	f000 fc96 	bl	8001038 <Error_Handler>

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000710:	2302      	movs	r3, #2
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_TIM_PWM_ConfigChannel(mClock, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8000718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f004 fb51 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <changeIntegrationTime+0x260>
 800072c:	f000 fc84 	bl	8001038 <Error_Handler>
		HAL_TIM_MspPostInit(mClock);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fd87 	bl	8001244 <HAL_TIM_MspPostInit>

		HAL_TIM_PWM_Start(mClock, TIM_CHANNEL_1); //PA6 - fM
 8000736:	2100      	movs	r1, #0
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f004 f9a5 	bl	8004a88 <HAL_TIM_PWM_Start>
	}

    {	//ADC Setup - htim4
    	TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	619a      	str	r2, [r3, #24]

    	unsigned long int pulse = 2*21;
 8000752:	232a      	movs	r3, #42	; 0x2a
 8000754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    	adcTimer->Init.Period = 4*pulse-1;
 8000758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	60da      	str	r2, [r3, #12]
    	sConfigOC.Pulse = pulse-1;
 8000764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000768:	3b01      	subs	r3, #1
 800076a:	617b      	str	r3, [r7, #20]

    	//100*4*84

    	adcTimer->Init.Prescaler = 0;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
    	adcTimer->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    	adcTimer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
    	adcTimer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
    	if (HAL_TIM_Base_Init(adcTimer) != HAL_OK) { Error_Handler(); }
 8000784:	6838      	ldr	r0, [r7, #0]
 8000786:	f004 f873 	bl	8004870 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <changeIntegrationTime+0x2c4>
 8000790:	f000 fc52 	bl	8001038 <Error_Handler>

    	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000794:	2360      	movs	r3, #96	; 0x60
 8000796:	613b      	str	r3, [r7, #16]
    	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
    	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
    	if (HAL_TIM_PWM_ConfigChannel(adcTimer, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); }
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	220c      	movs	r2, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	6838      	ldr	r0, [r7, #0]
 80007aa:	f004 fb0d 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <changeIntegrationTime+0x2e8>
 80007b4:	f000 fc40 	bl	8001038 <Error_Handler>

    	  HAL_TIM_PWM_Start(adcTimer, TIM_CHANNEL_4);
 80007b8:	210c      	movs	r1, #12
 80007ba:	6838      	ldr	r0, [r7, #0]
 80007bc:	f004 f964 	bl	8004a88 <HAL_TIM_PWM_Start>
    }


	  __HAL_TIM_SET_COUNTER(adcTimer, 0);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(mClock, 0);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(icg, 66);
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2242      	movs	r2, #66	; 0x42
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_TIM_SET_COUNTER(sh, 0);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  }
 80007e0:	bf00      	nop
 80007e2:	3790      	adds	r7, #144	; 0x90
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <TIM2_IRQHandler>:

//Specifically at the beginning of the icg timer's period: reset all clocks (for stability, they should be aligned)
void TIM2_IRQHandler() { HAL_TIM_IRQHandler(&htim2); }
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TIM2_IRQHandler+0x10>)
 80007ee:	f004 f9fb 	bl	8004be8 <HAL_TIM_IRQHandler>
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001c0 	.word	0x200001c0

080007fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	  __HAL_TIM_SET_COUNTER(&htim2, 66);
	  __HAL_TIM_SET_COUNTER(&htim5, 0);
*/


	if (recieveIntegrationTimeFlag == 1) { recieveIntegrationTimeFlag = 2; }
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d102      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800080e:	2202      	movs	r2, #2
 8000810:	601a      	str	r2, [r3, #0]

	if (sendCCDDataFlag == 1) {
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d108      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 800081a:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 800081e:	4907      	ldr	r1, [pc, #28]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000820:	4807      	ldr	r0, [pc, #28]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000822:	f000 ff41 	bl	80016a8 <HAL_ADC_Start_DMA>
		sendCCDDataFlag = 0;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
	}
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20003cfc 	.word	0x20003cfc
 8000838:	20003cf4 	.word	0x20003cf4
 800083c:	20000328 	.word	0x20000328
 8000840:	20000118 	.word	0x20000118

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fe53 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f855 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fb59 	bl	8000f08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000856:	f000 fb37 	bl	8000ec8 <MX_DMA_Init>
  MX_TIM3_Init();
 800085a:	f000 f98d 	bl	8000b78 <MX_TIM3_Init>
  MX_TIM2_Init();
 800085e:	f000 f90b 	bl	8000a78 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000862:	f000 f9ff 	bl	8000c64 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000866:	f000 fa6f 	bl	8000d48 <MX_TIM5_Init>
  MX_ADC1_Init();
 800086a:	f000 f8b3 	bl	80009d4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800086e:	f009 faf3 	bl	8009e58 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000872:	f000 faf7 	bl	8000e64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
 8000876:	2100      	movs	r1, #0
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <main+0x98>)
 800087a:	f004 f905 	bl	8004a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 800087e:	210c      	movs	r1, #12
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <main+0x9c>)
 8000882:	f004 f901 	bl	8004a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
 8000886:	2100      	movs	r1, #0
 8000888:	4816      	ldr	r0, [pc, #88]	; (80008e4 <main+0xa0>)
 800088a:	f004 f8fd 	bl	8004a88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66); //600 ns delay
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <main+0xa0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2242      	movs	r2, #66	; 0x42
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //PA2 - SH
 8000896:	2108      	movs	r1, #8
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <main+0xa4>)
 800089a:	f004 f8f5 	bl	8004a88 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, Rx_dataChar, 20);
 800089e:	2214      	movs	r2, #20
 80008a0:	4912      	ldr	r1, [pc, #72]	; (80008ec <main+0xa8>)
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <main+0xac>)
 80008a4:	f005 f8f4 	bl	8005a90 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  changeIntegrationTime(&htim5, &htim2, &htim3, &htim4, 20);
 80008a8:	2314      	movs	r3, #20
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <main+0x9c>)
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <main+0x98>)
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <main+0xa0>)
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <main+0xa4>)
 80008b4:	f7ff fe0c 	bl	80004d0 <changeIntegrationTime>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (recieveIntegrationTimeFlag == 2) {
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <main+0xb0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d1fb      	bne.n	80008b8 <main+0x74>
		  changeIntegrationTime(&htim5, &htim2, &htim3, &htim4, recieveIntegrationTime);
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <main+0xb4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <main+0x9c>)
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <main+0x98>)
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <main+0xa0>)
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <main+0xa4>)
 80008ce:	f7ff fdff 	bl	80004d0 <changeIntegrationTime>
		  recieveIntegrationTimeFlag = 0;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <main+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
	  if (recieveIntegrationTimeFlag == 2) {
 80008d8:	e7ee      	b.n	80008b8 <main+0x74>
 80008da:	bf00      	nop
 80008dc:	20000208 	.word	0x20000208
 80008e0:	20000250 	.word	0x20000250
 80008e4:	200001c0 	.word	0x200001c0
 80008e8:	20000298 	.word	0x20000298
 80008ec:	20003ce0 	.word	0x20003ce0
 80008f0:	200002e0 	.word	0x200002e0
 80008f4:	20003cfc 	.word	0x20003cfc
 80008f8:	20003cf8 	.word	0x20003cf8

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f009 ff8e 	bl	800a82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <SystemClock_Config+0xd0>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <SystemClock_Config+0xd0>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <SystemClock_Config+0xd0>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <SystemClock_Config+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SystemClock_Config+0xd4>)
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <SystemClock_Config+0xd4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000970:	2319      	movs	r3, #25
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000974:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800097a:	2304      	movs	r3, #4
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800097e:	2307      	movs	r3, #7
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fb1a 	bl	8003fc0 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000992:	f000 fb51 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099a:	2302      	movs	r3, #2
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2102      	movs	r1, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fd7c 	bl	80044b0 <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009be:	f000 fb3b 	bl	8001038 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3750      	adds	r7, #80	; 0x50
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_ADC1_Init+0xa0>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a18:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a3a:	f000 fdf1 	bl	8001620 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a44:	f000 faf8 	bl	8001038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0x9c>)
 8000a5a:	f000 ff29 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a64:	f000 fae8 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000118 	.word	0x20000118
 8000a74:	40012000 	.word	0x40012000

08000a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 630000-1;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <MX_TIM2_Init+0xfc>)
 8000ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ace:	4828      	ldr	r0, [pc, #160]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000ad0:	f003 fece 	bl	8004870 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000ada:	f000 faad 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000aec:	f004 fa2e 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000af6:	f000 fa9f 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000afa:	481d      	ldr	r0, [pc, #116]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000afc:	f003 ff6a 	bl	80049d4 <HAL_TIM_PWM_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b06:	f000 fa97 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4619      	mov	r1, r3
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000b1a:	f004 feb1 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b24:	f000 fa88 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	; 0x60
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 840-1;
 8000b2c:	f240 3347 	movw	r3, #839	; 0x347
 8000b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000b42:	f004 f941 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b4c:	f000 fa74 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_TIM2_Init+0xf8>)
 8000b52:	f000 fb77 	bl	8001244 <HAL_TIM_MspPostInit>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	201c      	movs	r0, #28
 8000b5c:	f001 fa23 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b60:	201c      	movs	r0, #28
 8000b62:	f001 fa3c 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3738      	adds	r7, #56	; 0x38
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001c0 	.word	0x200001c0
 8000b74:	00099cef 	.word	0x00099cef

08000b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_TIM3_Init+0xe8>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bbc:	2229      	movs	r2, #41	; 0x29
 8000bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bcc:	4823      	ldr	r0, [pc, #140]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bce:	f003 fe4f 	bl	8004870 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000bd8:	f000 fa2e 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	4619      	mov	r1, r3
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bea:	f004 f9af 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000bf4:	f000 fa20 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf8:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bfa:	f003 feeb 	bl	80049d4 <HAL_TIM_PWM_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c04:	f000 fa18 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4619      	mov	r1, r3
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c18:	f004 fe32 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000c22:	f000 fa09 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c26:	2360      	movs	r3, #96	; 0x60
 8000c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21-1;
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c3e:	f004 f8c3 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000c48:	f000 f9f6 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c4e:	f000 faf9 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000208 	.word	0x20000208
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <MX_TIM4_Init+0xe0>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000ca8:	22a7      	movs	r2, #167	; 0xa7
 8000caa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cb8:	4821      	ldr	r0, [pc, #132]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000cba:	f003 fdd9 	bl	8004870 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000cc4:	f000 f9b8 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481a      	ldr	r0, [pc, #104]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000cd6:	f004 f939 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ce0:	f000 f9aa 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000ce6:	f003 fe75 	bl	80049d4 <HAL_TIM_PWM_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f000 f9a2 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4619      	mov	r1, r3
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000d04:	f004 fdbc 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000d0e:	f000 f993 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d12:	2360      	movs	r3, #96	; 0x60
 8000d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 8000d16:	2329      	movs	r3, #41	; 0x29
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	220c      	movs	r2, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_TIM4_Init+0xdc>)
 8000d2a:	f004 f84d 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000d34:	f000 f980 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	; 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000250 	.word	0x20000250
 8000d44:	40000800 	.word	0x40000800

08000d48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b092      	sub	sp, #72	; 0x48
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000d8a:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <MX_TIM5_Init+0x118>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1680-1;
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000d9c:	f240 628f 	movw	r2, #1679	; 0x68f
 8000da0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dae:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000db0:	f003 fd5e 	bl	8004870 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000dba:	f000 f93d 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4824      	ldr	r0, [pc, #144]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000dcc:	f004 f8be 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000dd6:	f000 f92f 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dda:	4820      	ldr	r0, [pc, #128]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000ddc:	f003 fdfa 	bl	80049d4 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000de6:	f000 f927 	bl	8001038 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000dea:	2306      	movs	r3, #6
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000dfa:	f004 f96e 	bl	80050da <HAL_TIM_SlaveConfigSynchro>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000e04:	f000 f918 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000e18:	f004 fd32 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000e22:	f000 f909 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 336-1;
 8000e2a:	f240 134f 	movw	r3, #335	; 0x14f
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000e40:	f003 ffc2 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8000e4a:	f000 f8f5 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0x114>)
 8000e50:	f000 f9f8 	bl	8001244 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3748      	adds	r7, #72	; 0x48
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000298 	.word	0x20000298
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <MX_USART1_UART_Init+0x60>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e70:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e9c:	f004 fd72 	bl	8005984 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f8c7 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2025      	movs	r0, #37	; 0x25
 8000eb0:	f001 f879 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb4:	2025      	movs	r0, #37	; 0x25
 8000eb6:	f001 f892 	bl	8001fde <HAL_NVIC_EnableIRQ>



  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200002e0 	.word	0x200002e0
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DMA_Init+0x3c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <MX_DMA_Init+0x3c>)
 8000ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_DMA_Init+0x3c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2038      	movs	r0, #56	; 0x38
 8000ef0:	f001 f859 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ef4:	2038      	movs	r0, #56	; 0x38
 8000ef6:	f001 f872 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_GPIO_Init+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_UART_RxCpltCallback>:
}

//There is a potential in the case that a bit is lost in transmission that the CCD will cease to respond until the buffer is properly restored
//This will only occur if 19 bits in total are lost or if the CCD is turned off and on again
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (Rx_dataChar[0] == 's' && sendCCDDataFlag == 0) {
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b73      	cmp	r3, #115	; 0x73
 8000f66:	d106      	bne.n	8000f76 <HAL_UART_RxCpltCallback+0x1e>
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_UART_RxCpltCallback+0x98>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <HAL_UART_RxCpltCallback+0x1e>
	  sendCCDDataFlag = 1;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_UART_RxCpltCallback+0x98>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
	}

	if (Rx_dataChar[0] == 'e') {
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b65      	cmp	r3, #101	; 0x65
 8000f7c:	d12d      	bne.n	8000fda <HAL_UART_RxCpltCallback+0x82>
		  unsigned long int exp = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
		  for (int i = 1; i < 20 && Rx_dataChar[i] != '\0'; i++) {
 8000f82:	2301      	movs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	e016      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x5e>
			  exp *= 10;
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
			  exp += (Rx_dataChar[i]) - '0';
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b30      	subs	r3, #48	; 0x30
 8000fa4:	60fb      	str	r3, [r7, #12]
			  Rx_dataChar[i] = '\0';
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
		  for (int i = 1; i < 20 && Rx_dataChar[i] != '\0'; i++) {
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b13      	cmp	r3, #19
 8000fba:	dc05      	bgt.n	8000fc8 <HAL_UART_RxCpltCallback+0x70>
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1df      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x30>
		  }
		  recieveIntegrationTime = exp;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_UART_RxCpltCallback+0x9c>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6013      	str	r3, [r2, #0]
		  recieveIntegrationTimeFlag = 1;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_UART_RxCpltCallback+0xa0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		  Rx_dataChar[0] = '\0';
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart1, Rx_dataChar, 20);
 8000fda:	2214      	movs	r2, #20
 8000fdc:	4903      	ldr	r1, [pc, #12]	; (8000fec <HAL_UART_RxCpltCallback+0x94>)
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <HAL_UART_RxCpltCallback+0xa4>)
 8000fe0:	f004 fd56 	bl	8005a90 <HAL_UART_Receive_IT>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20003ce0 	.word	0x20003ce0
 8000ff0:	20003cf4 	.word	0x20003cf4
 8000ff4:	20003cf8 	.word	0x20003cf8
 8000ff8:	20003cfc 	.word	0x20003cfc
 8000ffc:	200002e0 	.word	0x200002e0

08001000 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	//sendStage++;
	//sendStage = sendStage % divisions;
	//HAL_Delay(500);

}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]


	//transmit_CCD_Data_BLE();


	HAL_UART_Transmit_IT(&huart1, (uint8_t*)CCDPixelBuffer, CCDBuffer);
 800101c:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 8001020:	4903      	ldr	r1, [pc, #12]	; (8001030 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <HAL_ADC_ConvCpltCallback+0x20>)
 8001024:	f004 fcfe 	bl	8005a24 <HAL_UART_Transmit_IT>

	//sendCCDDataFlag = 0;
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000328 	.word	0x20000328
 8001034:	200002e0 	.word	0x200002e0

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_MspInit+0x4c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x4c>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_ADC_MspInit+0xd8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d156      	bne.n	8001164 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ee:	2308      	movs	r3, #8
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0xe0>)
 8001102:	f001 fb89 	bl	8002818 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001108:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_ADC_MspInit+0xe8>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001124:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001134:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800114a:	f000 ff63 	bl	8002014 <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001154:	f7ff ff70 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40012000 	.word	0x40012000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000
 8001178:	20000160 	.word	0x20000160
 800117c:	40026410 	.word	0x40026410

08001180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001190:	d10e      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011ae:	e03a      	b.n	8001226 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_TIM_Base_MspInit+0xb8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10e      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
}
 80011d6:	e026      	b.n	8001226 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_TIM_Base_MspInit+0xbc>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10e      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
}
 80011fe:	e012      	b.n	8001226 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_TIM_Base_MspInit+0xc0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10d      	bne.n	8001226 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_TIM_Base_MspInit+0xb4>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40000400 	.word	0x40000400
 800123c:	40000800 	.word	0x40000800
 8001240:	40000c00 	.word	0x40000c00

08001244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001264:	d11e      	bne.n	80012a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a33      	ldr	r2, [pc, #204]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ICG_Pin;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001292:	2301      	movs	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ICG_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4828      	ldr	r0, [pc, #160]	; (8001340 <HAL_TIM_MspPostInit+0xfc>)
 800129e:	f001 fabb 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012a2:	e046      	b.n	8001332 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_TIM_MspPostInit+0x100>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11e      	bne.n	80012ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Master_Clock_Pin;
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012da:	2302      	movs	r3, #2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Master_Clock_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <HAL_TIM_MspPostInit+0xfc>)
 80012e6:	f001 fa97 	bl	8002818 <HAL_GPIO_Init>
}
 80012ea:	e022      	b.n	8001332 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_TIM_MspPostInit+0x104>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d11d      	bne.n	8001332 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_TIM_MspPostInit+0xf8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SH_Pin;
 8001312:	2304      	movs	r3, #4
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001322:	2302      	movs	r3, #2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SH_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <HAL_TIM_MspPostInit+0xfc>)
 800132e:	f001 fa73 	bl	8002818 <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40000400 	.word	0x40000400
 8001348:	40000c00 	.word	0x40000c00

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_UART_MspInit+0x94>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d134      	bne.n	80013d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_UART_MspInit+0x98>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_UART_MspInit+0x98>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x98>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_UART_MspInit+0x98>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_UART_MspInit+0x98>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b8:	2307      	movs	r3, #7
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <HAL_UART_MspInit+0x9c>)
 80013c4:	f001 fa28 	bl	8002818 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2025      	movs	r0, #37	; 0x25
 80013ce:	f000 fdea 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013d2:	2025      	movs	r0, #37	; 0x25
 80013d4:	f000 fe03 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40011000 	.word	0x40011000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001438:	f000 f8ae 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART1_IRQHandler+0x10>)
 8001446:	f004 fb49 	bl	8005adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002e0 	.word	0x200002e0

08001454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA2_Stream0_IRQHandler+0x10>)
 800145a:	f000 ff73 	bl	8002344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000160 	.word	0x20000160

08001468 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <OTG_FS_IRQHandler+0x10>)
 800146e:	f001 fc9b 	bl	8002da8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200049e4 	.word	0x200049e4

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	; (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f009 f9b5 	bl	800a83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f9b7 	bl	8000844 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80014e4:	0800a914 	.word	0x0800a914
  ldr r2, =_sbss
 80014e8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80014ec:	200050e8 	.word	0x200050e8

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fd37 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fd8c 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fd4f 	bl	8001ffa <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 fd17 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20003d00 	.word	0x20003d00

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20003d00 	.word	0x20003d00

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e033      	b.n	800169e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fd28 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d118      	bne.n	8001690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001666:	f023 0302 	bic.w	r3, r3, #2
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fa3e 	bl	8001af4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	e001      	b.n	8001694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Start_DMA+0x1e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0ce      	b.n	8001864 <HAL_ADC_Start_DMA+0x1bc>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d018      	beq.n	800170e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ec:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_ADC_Start_DMA+0x1c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_ADC_Start_DMA+0x1c8>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3b01      	subs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171c:	d107      	bne.n	800172e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800172c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	f040 8086 	bne.w	800184a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001768:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177c:	d106      	bne.n	800178c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f023 0206 	bic.w	r2, r3, #6
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
 800178a:	e002      	b.n	8001792 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_ADC_Start_DMA+0x1cc>)
 800179c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	4a35      	ldr	r2, [pc, #212]	; (8001878 <HAL_ADC_Start_DMA+0x1d0>)
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	4a34      	ldr	r2, [pc, #208]	; (800187c <HAL_ADC_Start_DMA+0x1d4>)
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	4a33      	ldr	r2, [pc, #204]	; (8001880 <HAL_ADC_Start_DMA+0x1d8>)
 80017b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	334c      	adds	r3, #76	; 0x4c
 80017ea:	4619      	mov	r1, r3
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f000 fcbe 	bl	8002170 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10f      	bne.n	8001820 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d129      	bne.n	8001862 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	e020      	b.n	8001862 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_ADC_Start_DMA+0x1dc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d11b      	bne.n	8001862 <HAL_ADC_Start_DMA+0x1ba>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d114      	bne.n	8001862 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	e00b      	b.n	8001862 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f043 0210 	orr.w	r2, r3, #16
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	431bde83 	.word	0x431bde83
 8001874:	40012300 	.word	0x40012300
 8001878:	08001ced 	.word	0x08001ced
 800187c:	08001da7 	.word	0x08001da7
 8001880:	08001dc3 	.word	0x08001dc3
 8001884:	40012000 	.word	0x40012000

08001888 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1c>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e105      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x228>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d925      	bls.n	8001928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	3b1e      	subs	r3, #30
 800191c:	409a      	lsls	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	e022      	b.n	800196e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	4603      	mov	r3, r0
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b06      	cmp	r3, #6
 8001974:	d824      	bhi.n	80019c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e04c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d824      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b23      	subs	r3, #35	; 0x23
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b23      	subs	r3, #35	; 0x23
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a10:	e023      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b41      	subs	r3, #65	; 0x41
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b41      	subs	r3, #65	; 0x41
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_ADC_ConfigChannel+0x234>)
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d123      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x1e6>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d11b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_ADC_ConfigChannel+0x23c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_ADC_ConfigChannel+0x240>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0c9a      	lsrs	r2, r3, #18
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	20000000 	.word	0x20000000
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <ADC_Init+0x1f0>)
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021a      	lsls	r2, r3, #8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <ADC_Init+0x1f4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d022      	beq.n	8001bd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e00f      	b.n	8001bf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0202 	bic.w	r2, r2, #2
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	005a      	lsls	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	035a      	lsls	r2, r3, #13
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	e007      	b.n	8001c68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	051a      	lsls	r2, r3, #20
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001caa:	025a      	lsls	r2, r3, #9
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	029a      	lsls	r2, r3, #10
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40012300 	.word	0x40012300
 8001ce8:	0f000001 	.word	0x0f000001

08001cec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d13c      	bne.n	8001d80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12b      	bne.n	8001d78 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d127      	bne.n	8001d78 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d119      	bne.n	8001d78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0220 	bic.w	r2, r2, #32
 8001d52:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff f94b 	bl	8001014 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d7e:	e00e      	b.n	8001d9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fd85 	bl	800189c <HAL_ADC_ErrorCallback>
}
 8001d92:	e004      	b.n	8001d9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff fd67 	bl	8001888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fd5a 	bl	800189c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff face 	bl	80015c0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e099      	b.n	8002164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	e00f      	b.n	8002072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff fab5 	bl	80015c0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d908      	bls.n	8002072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e078      	b.n	8002164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e8      	bne.n	8002052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_DMA_Init+0x158>)
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0307 	bic.w	r3, r3, #7
 80020f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b04      	cmp	r3, #4
 8002104:	d117      	bne.n	8002136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb01 	bl	8002720 <DMA_CheckFifoParam>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002132:	2301      	movs	r3, #1
 8002134:	e016      	b.n	8002164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fab8 	bl	80026b4 <DMA_CalcBaseAndBitshift>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	f010803f 	.word	0xf010803f

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_DMA_Start_IT+0x26>
 8002192:	2302      	movs	r3, #2
 8002194:	e040      	b.n	8002218 <HAL_DMA_Start_IT+0xa8>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d12f      	bne.n	800220a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa4a 	bl	8002658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0216 	orr.w	r2, r2, #22
 80021de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e005      	b.n	8002216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff f9c7 	bl	80015c0 <HAL_GetTick>
 8002232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e052      	b.n	80022f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0216 	bic.w	r2, r2, #22
 8002260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HAL_DMA_Abort+0x62>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0208 	bic.w	r2, r2, #8
 8002290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a2:	e013      	b.n	80022cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a4:	f7ff f98c 	bl	80015c0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d90c      	bls.n	80022cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e015      	b.n	80022f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e4      	bne.n	80022a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	223f      	movs	r2, #63	; 0x3f
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00c      	b.n	8002338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2205      	movs	r2, #5
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002350:	4b8e      	ldr	r3, [pc, #568]	; (800258c <HAL_DMA_IRQHandler+0x248>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a8e      	ldr	r2, [pc, #568]	; (8002590 <HAL_DMA_IRQHandler+0x24c>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a9b      	lsrs	r3, r3, #10
 800235c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	2208      	movs	r2, #8
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0204 	bic.w	r2, r2, #4
 8002396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2208      	movs	r2, #8
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	2201      	movs	r2, #1
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	2201      	movs	r2, #1
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0202 	orr.w	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	2204      	movs	r2, #4
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d012      	beq.n	800241c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2204      	movs	r2, #4
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2210      	movs	r2, #16
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d043      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03c      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2210      	movs	r2, #16
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d018      	beq.n	8002486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d024      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
 8002472:	e01f      	b.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
 8002484:	e016      	b.n	80024b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0208 	bic.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	2220      	movs	r2, #32
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 808f 	beq.w	80025e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8087 	beq.w	80025e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	2220      	movs	r2, #32
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d136      	bne.n	800255c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0216 	bic.w	r2, r2, #22
 80024fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <HAL_DMA_IRQHandler+0x1da>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	223f      	movs	r2, #63	; 0x3f
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d07e      	beq.n	8002650 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
        }
        return;
 800255a:	e079      	b.n	8002650 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01d      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	2b00      	cmp	r3, #0
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
 8002588:	e02c      	b.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000
 8002590:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e01e      	b.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10f      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0210 	bic.w	r2, r2, #16
 80025c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d032      	beq.n	8002652 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2205      	movs	r2, #5
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3301      	adds	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	d307      	bcc.n	800262c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f2      	bne.n	8002610 <HAL_DMA_IRQHandler+0x2cc>
 800262a:	e000      	b.n	800262e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800262c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e000      	b.n	8002652 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002650:	bf00      	nop
    }
  }
}
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d108      	bne.n	8002698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002696:	e007      	b.n	80026a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b10      	subs	r3, #16
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <DMA_CalcBaseAndBitshift+0x64>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <DMA_CalcBaseAndBitshift+0x68>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d909      	bls.n	80026f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	659a      	str	r2, [r3, #88]	; 0x58
 80026f4:	e007      	b.n	8002706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	aaaaaaab 	.word	0xaaaaaaab
 800271c:	0800a8fc 	.word	0x0800a8fc

08002720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d856      	bhi.n	80027ee <DMA_CheckFifoParam+0xce>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <DMA_CheckFifoParam+0x28>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800276b 	.word	0x0800276b
 8002750:	08002759 	.word	0x08002759
 8002754:	080027ef 	.word	0x080027ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d046      	beq.n	80027f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e043      	b.n	80027f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002772:	d140      	bne.n	80027f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e03d      	b.n	80027f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d121      	bne.n	80027c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d837      	bhi.n	80027fa <DMA_CheckFifoParam+0xda>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <DMA_CheckFifoParam+0x70>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027a7 	.word	0x080027a7
 8002798:	080027a1 	.word	0x080027a1
 800279c:	080027b9 	.word	0x080027b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e030      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d025      	beq.n	80027fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e022      	b.n	80027fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c0:	d11f      	bne.n	8002802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c6:	e01c      	b.n	8002802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d903      	bls.n	80027d6 <DMA_CheckFifoParam+0xb6>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d003      	beq.n	80027dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d4:	e018      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      break;
 80027da:	e015      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e00b      	b.n	8002806 <DMA_CheckFifoParam+0xe6>
      break;
 80027ee:	bf00      	nop
 80027f0:	e00a      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e008      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e006      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e004      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;   
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
    }
  } 
  
  return status; 
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e159      	b.n	8002ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8148 	bne.w	8002ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a2 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b54      	ldr	r3, [pc, #336]	; (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x2ec>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x202>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_GPIO_Init+0x2f4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x1fe>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <HAL_GPIO_Init+0x2f8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x1fa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a46      	ldr	r2, [pc, #280]	; (8002b14 <HAL_GPIO_Init+0x2fc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x1f6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <HAL_GPIO_Init+0x300>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x1f2>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x2ec>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f aea2 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e101      	b.n	8002d36 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f007 fb63 	bl	800a218 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d102      	bne.n	8002b68 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 ffc0 	bl	8006af2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7c1a      	ldrb	r2, [r3, #16]
 8002b7a:	f88d 2000 	strb.w	r2, [sp]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b82:	f003 fe9f 	bl	80068c4 <USB_CoreInit>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0ce      	b.n	8002d36 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 ffb8 	bl	8006b14 <USB_SetCurrentMode>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0bf      	b.n	8002d36 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e04a      	b.n	8002c52 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3315      	adds	r3, #21
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3314      	adds	r3, #20
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	b298      	uxth	r0, r3
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	332e      	adds	r3, #46	; 0x2e
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3318      	adds	r3, #24
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	331c      	adds	r3, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3320      	adds	r3, #32
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3af      	bcc.n	8002bbc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e044      	b.n	8002cec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3b5      	bcc.n	8002c62 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7c1a      	ldrb	r2, [r3, #16]
 8002cfe:	f88d 2000 	strb.w	r2, [sp]
 8002d02:	3304      	adds	r3, #4
 8002d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d06:	f003 ff51 	bl	8006bac <USB_DevInit>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e00c      	b.n	8002d36 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 ff95 	bl	8007c5e <USB_DevDisconnect>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_PCD_Start+0x1c>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e022      	b.n	8002da0 <HAL_PCD_Start+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fea2 	bl	8006ad0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 ff43 	bl	8007c1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b08d      	sub	sp, #52	; 0x34
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 f801 	bl	8007dc6 <USB_GetMode>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 848c 	bne.w	80036e4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 ff65 	bl	8007ca0 <USB_ReadInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8482 	beq.w	80036e2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 ff52 	bl	8007ca0 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 0202 	and.w	r2, r2, #2
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 ff40 	bl	8007ca0 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d161      	bne.n	8002eee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	0c5b      	lsrs	r3, r3, #17
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d124      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d035      	beq.n	8002ede <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	6a38      	ldr	r0, [r7, #32]
 8002e86:	f004 fd77 	bl	8007978 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e96:	441a      	add	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea8:	441a      	add	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	e016      	b.n	8002ede <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	0c5b      	lsrs	r3, r3, #17
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d110      	bne.n	8002ede <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6a38      	ldr	r0, [r7, #32]
 8002ec8:	f004 fd56 	bl	8007978 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0210 	orr.w	r2, r2, #16
 8002eec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fed4 	bl	8007ca0 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f02:	f040 80a7 	bne.w	8003054 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fed9 	bl	8007cc6 <USB_ReadDevAllOutEpInterrupt>
 8002f14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f16:	e099      	b.n	800304c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 808e 	beq.w	8003040 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 fefd 	bl	8007d2e <USB_ReadDevOutEPInterrupt>
 8002f34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2301      	movs	r3, #1
 8002f50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fea1 	bl	8003c9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	2308      	movs	r3, #8
 8002f74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 ff77 	bl	8003e6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d030      	beq.n	8003006 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d109      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f007 fa0e 	bl	800a410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	2302      	movs	r3, #2
 8003004:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	2320      	movs	r3, #32
 8003020:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003038:	461a      	mov	r2, r3
 800303a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	3301      	adds	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	f47f af62 	bne.w	8002f18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fe21 	bl	8007ca0 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003068:	f040 80db 	bne.w	8003222 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f004 fe42 	bl	8007cfa <USB_ReadDevAllInEpInterrupt>
 8003076:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800307c:	e0cd      	b.n	800321a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80c2 	beq.w	800320e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fe68 	bl	8007d6a <USB_ReadDevInEPInterrupt>
 800309a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d057      	beq.n	8003156 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	2201      	movs	r2, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69f9      	ldr	r1, [r7, #28]
 80030c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030c6:	4013      	ands	r3, r2
 80030c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	799b      	ldrb	r3, [r3, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d132      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3320      	adds	r3, #32
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4403      	add	r3, r0
 8003104:	331c      	adds	r3, #28
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4419      	add	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	3320      	adds	r3, #32
 800311a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d113      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3324      	adds	r3, #36	; 0x24
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003142:	461a      	mov	r2, r3
 8003144:	2101      	movs	r1, #1
 8003146:	f004 fe6f 	bl	8007e28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f007 f8e2 	bl	800a31a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316c:	461a      	mov	r2, r3
 800316e:	2308      	movs	r3, #8
 8003170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	461a      	mov	r2, r3
 800318a:	2310      	movs	r3, #16
 800318c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	2340      	movs	r3, #64	; 0x40
 80031a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	6a38      	ldr	r0, [r7, #32]
 80031b8:	f003 fe5c 	bl	8006e74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3310      	adds	r3, #16
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f007 f925 	bl	800a434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	2302      	movs	r3, #2
 80031fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fcbb 	bl	8003b84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	3301      	adds	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af2e 	bne.w	800307e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fd3a 	bl	8007ca0 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003236:	d122      	bne.n	800327e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800325e:	2100      	movs	r1, #0
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fea1 	bl	8003fa8 <HAL_PCDEx_LPM_Callback>
 8003266:	e002      	b.n	800326e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f007 f8c3 	bl	800a3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fd0c 	bl	8007ca0 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	d112      	bne.n	80032ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f007 f87f 	bl	800a3a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032b8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fcee 	bl	8007ca0 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	f040 80b7 	bne.w	8003440 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2110      	movs	r1, #16
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fdc1 	bl	8006e74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	e046      	b.n	8003386 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	461a      	mov	r2, r3
 8003306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800330a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	440a      	add	r2, r1
 8003322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800332a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003350:	0151      	lsls	r1, r2, #5
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	440a      	add	r2, r1
 8003356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800335a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	440a      	add	r2, r1
 8003376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800337a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800337e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	3301      	adds	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	4293      	cmp	r3, r2
 8003390:	d3b2      	bcc.n	80032f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7bdb      	ldrb	r3, [r3, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033be:	f043 030b 	orr.w	r3, r3, #11
 80033c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d4:	f043 030b 	orr.w	r3, r3, #11
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	e015      	b.n	8003408 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003402:	f043 030b 	orr.w	r3, r3, #11
 8003406:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003416:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800341a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800342a:	461a      	mov	r2, r3
 800342c:	f004 fcfc 	bl	8007e28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800343e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fc2b 	bl	8007ca0 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003454:	d123      	bne.n	800349e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fcc1 	bl	8007de2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fd7e 	bl	8006f66 <USB_GetDevSpeed>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f001 f9c7 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 800347a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003480:	461a      	mov	r2, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f003 fa82 	bl	800698c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f006 ff6e 	bl	800a36a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800349c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fbfc 	bl	8007ca0 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d10a      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f006 ff4b 	bl	800a34e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f002 0208 	and.w	r2, r2, #8
 80034c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fbe7 	bl	8007ca0 <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d123      	bne.n	8003524 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e8:	2301      	movs	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e014      	b.n	8003518 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb08 	bl	8003b22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	3301      	adds	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	791b      	ldrb	r3, [r3, #4]
 800351c:	461a      	mov	r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	4293      	cmp	r3, r2
 8003522:	d3e4      	bcc.n	80034ee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f004 fbb9 	bl	8007ca0 <USB_ReadInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003538:	d13c      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800353a:	2301      	movs	r3, #1
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	e02b      	b.n	8003598 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3318      	adds	r3, #24
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d115      	bne.n	8003592 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003566:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	da12      	bge.n	8003592 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3317      	adds	r3, #23
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fac8 	bl	8003b22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	461a      	mov	r2, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d3cd      	bcc.n	8003540 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 fb71 	bl	8007ca0 <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c8:	d156      	bne.n	8003678 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e045      	b.n	800365c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d12e      	bne.n	8003656 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da2b      	bge.n	8003656 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800360a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800360e:	429a      	cmp	r2, r3
 8003610:	d121      	bne.n	8003656 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003652:	6053      	str	r3, [r2, #4]
            break;
 8003654:	e008      	b.n	8003668 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	3301      	adds	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	461a      	mov	r2, r3
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	4293      	cmp	r3, r2
 8003666:	d3b3      	bcc.n	80035d0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f004 fb0f 	bl	8007ca0 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d10a      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f006 fee2 	bl	800a458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 faf9 	bl	8007ca0 <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d115      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f006 fed2 	bl	800a474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	e000      	b.n	80036e4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80036e2:	bf00      	nop
    }
  }
}
 80036e4:	3734      	adds	r7, #52	; 0x34
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_PCD_SetAddress+0x1a>
 8003700:	2302      	movs	r3, #2
 8003702:	e012      	b.n	800372a <HAL_PCD_SetAddress+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f004 fa58 	bl	8007bd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	4608      	mov	r0, r1
 800373c:	4611      	mov	r1, r2
 800373e:	461a      	mov	r2, r3
 8003740:	4603      	mov	r3, r0
 8003742:	70fb      	strb	r3, [r7, #3]
 8003744:	460b      	mov	r3, r1
 8003746:	803b      	strh	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0f      	bge.n	8003778 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	3310      	adds	r3, #16
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	705a      	strb	r2, [r3, #1]
 8003776:	e00f      	b.n	8003798 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037a4:	883a      	ldrh	r2, [r7, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	78ba      	ldrb	r2, [r7, #2]
 80037ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037c2:	78bb      	ldrb	r3, [r7, #2]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d102      	bne.n	80037ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_PCD_EP_Open+0xaa>
 80037d8:	2302      	movs	r3, #2
 80037da:	e00e      	b.n	80037fa <HAL_PCD_EP_Open+0xc8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68f9      	ldr	r1, [r7, #12]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fbe0 	bl	8006fb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80037f8:	7afb      	ldrb	r3, [r7, #11]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800380e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003812:	2b00      	cmp	r3, #0
 8003814:	da0f      	bge.n	8003836 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3310      	adds	r3, #16
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	705a      	strb	r2, [r3, #1]
 8003834:	e00f      	b.n	8003856 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b2da      	uxtb	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_PCD_EP_Close+0x6e>
 800386c:	2302      	movs	r3, #2
 800386e:	e00e      	b.n	800388e <HAL_PCD_EP_Close+0x8c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fc1e 	bl	80070c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	460b      	mov	r3, r1
 80038a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	7afb      	ldrb	r3, [r7, #11]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	799b      	ldrb	r3, [r3, #6]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	799b      	ldrb	r3, [r3, #6]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	f003 fcbb 	bl	8007278 <USB_EPStartXfer>

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394c:	7afb      	ldrb	r3, [r7, #11]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	3310      	adds	r3, #16
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	3304      	adds	r3, #4
 8003962:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2201      	movs	r2, #1
 800397a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	799b      	ldrb	r3, [r3, #6]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	799b      	ldrb	r3, [r3, #6]
 800399e:	461a      	mov	r2, r3
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	f003 fc69 	bl	8007278 <USB_EPStartXfer>

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	7912      	ldrb	r2, [r2, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e04f      	b.n	8003a6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0f      	bge.n	80039f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00d      	b.n	8003a12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	3304      	adds	r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_EP_SetStall+0x82>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e01d      	b.n	8003a6e <HAL_PCD_EP_SetStall+0xbe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 fff1 	bl	8007a28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7999      	ldrb	r1, [r3, #6]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f004 f9e2 	bl	8007e28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	7912      	ldrb	r2, [r2, #4]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e042      	b.n	8003b1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da0f      	bge.n	8003abc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3310      	adds	r3, #16
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	705a      	strb	r2, [r3, #1]
 8003aba:	e00f      	b.n	8003adc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_EP_ClrStall+0x86>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e00e      	b.n	8003b1a <HAL_PCD_EP_ClrStall+0xa4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f003 fffa 	bl	8007b04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da0c      	bge.n	8003b50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3310      	adds	r3, #16
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e00c      	b.n	8003b6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	3304      	adds	r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f003 fe19 	bl	80077a8 <USB_EPStopXfer>
 8003b76:	4603      	mov	r3, r0
 8003b78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d901      	bls.n	8003bbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e06b      	b.n	8003c94 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d902      	bls.n	8003bd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3303      	adds	r3, #3
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be0:	e02a      	b.n	8003c38 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d902      	bls.n	8003bfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3303      	adds	r3, #3
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68d9      	ldr	r1, [r3, #12]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f003 fe6e 	bl	80078fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	441a      	add	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	441a      	add	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d809      	bhi.n	8003c62 <PCD_WriteEmptyTxFifo+0xde>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d203      	bcs.n	8003c62 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1bf      	bne.n	8003be2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d811      	bhi.n	8003c92 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	2201      	movs	r2, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c8e:	4013      	ands	r3, r2
 8003c90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	333c      	adds	r3, #60	; 0x3c
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	799b      	ldrb	r3, [r3, #6]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d17b      	bne.n	8003dca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4a61      	ldr	r2, [pc, #388]	; (8003e64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	f240 80b9 	bls.w	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80b3 	beq.w	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	e0a7      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2320      	movs	r3, #32
 8003d22:	6093      	str	r3, [r2, #8]
 8003d24:	e098      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 8093 	bne.w	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d90f      	bls.n	8003d5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	461a      	mov	r2, r3
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	6093      	str	r3, [r2, #8]
 8003d58:	e07e      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	1ad2      	subs	r2, r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d114      	bne.n	8003dbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003da4:	461a      	mov	r2, r3
 8003da6:	2101      	movs	r1, #1
 8003da8:	f004 f83e 	bl	8007e28 <USB_EP0_OutStart>
 8003dac:	e006      	b.n	8003dbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f006 fa8e 	bl	800a2e4 <HAL_PCD_DataOutStageCallback>
 8003dc8:	e046      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d124      	bne.n	8003e1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	e032      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f006 fa65 	bl	800a2e4 <HAL_PCD_DataOutStageCallback>
 8003e1a:	e01d      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d114      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e44:	461a      	mov	r2, r3
 8003e46:	2100      	movs	r1, #0
 8003e48:	f003 ffee 	bl	8007e28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f006 fa46 	bl	800a2e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	4f54300a 	.word	0x4f54300a
 8003e68:	4f54310a 	.word	0x4f54310a

08003e6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	333c      	adds	r3, #60	; 0x3c
 8003e84:	3304      	adds	r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d90e      	bls.n	8003ec0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ebe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f006 f9fd 	bl	800a2c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d90c      	bls.n	8003ee8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	799b      	ldrb	r3, [r3, #6]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d108      	bne.n	8003ee8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f003 ffa0 	bl	8007e28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	4f54300a 	.word	0x4f54300a

08003ef8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
 8003f04:	4613      	mov	r3, r2
 8003f06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f16:	883b      	ldrh	r3, [r7, #0]
 8003f18:	0419      	lsls	r1, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
 8003f24:	e028      	b.n	8003f78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4413      	add	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e00d      	b.n	8003f56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	3340      	adds	r3, #64	; 0x40
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	3301      	adds	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	7bfa      	ldrb	r2, [r7, #15]
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3ec      	bcc.n	8003f3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f60:	883b      	ldrh	r3, [r7, #0]
 8003f62:	0418      	lsls	r0, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6819      	ldr	r1, [r3, #0]
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4302      	orrs	r2, r0
 8003f70:	3340      	adds	r3, #64	; 0x40
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e267      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d075      	beq.n	80040ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fde:	4b88      	ldr	r3, [pc, #544]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d00c      	beq.n	8004004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fea:	4b85      	ldr	r3, [pc, #532]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d112      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004002:	d10b      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	4b7e      	ldr	r3, [pc, #504]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05b      	beq.n	80040c8 <HAL_RCC_OscConfig+0x108>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d157      	bne.n	80040c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e242      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x74>
 8004026:	4b76      	ldr	r3, [pc, #472]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a75      	ldr	r2, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x98>
 800403e:	4b70      	ldr	r3, [pc, #448]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6f      	ldr	r2, [pc, #444]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b6d      	ldr	r3, [pc, #436]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6c      	ldr	r2, [pc, #432]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004058:	4b69      	ldr	r3, [pc, #420]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a68      	ldr	r2, [pc, #416]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b66      	ldr	r3, [pc, #408]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fd faa2 	bl	80015c0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004080:	f7fd fa9e 	bl	80015c0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e207      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xc0>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fd fa8e 	bl	80015c0 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd fa8a 	bl	80015c0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1f3      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	4b51      	ldr	r3, [pc, #324]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0xe8>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d6:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11c      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b44      	ldr	r3, [pc, #272]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	4b41      	ldr	r3, [pc, #260]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1c7      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4937      	ldr	r1, [pc, #220]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <HAL_RCC_OscConfig+0x244>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fd fa43 	bl	80015c0 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413e:	f7fd fa3f 	bl	80015c0 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1a8      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4925      	ldr	r1, [pc, #148]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_RCC_OscConfig+0x244>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fa22 	bl	80015c0 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd fa1e 	bl	80015c0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e187      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d036      	beq.n	8004218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x248>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fa02 	bl	80015c0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd f9fe 	bl	80015c0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e167      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x200>
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x248>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e6:	f7fd f9eb 	bl	80015c0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	e00e      	b.n	800420c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fd f9e7 	bl	80015c0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d907      	bls.n	800420c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e150      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004200:	40023800 	.word	0x40023800
 8004204:	42470000 	.word	0x42470000
 8004208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ea      	bne.n	80041ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8097 	beq.w	8004354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b81      	ldr	r3, [pc, #516]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b7d      	ldr	r3, [pc, #500]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a7c      	ldr	r2, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b7a      	ldr	r3, [pc, #488]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b77      	ldr	r3, [pc, #476]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b74      	ldr	r3, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fd f9a7 	bl	80015c0 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd f9a3 	bl	80015c0 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e10c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x2ea>
 800429c:	4b64      	ldr	r3, [pc, #400]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a63      	ldr	r2, [pc, #396]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	e01c      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x30c>
 80042b2:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a5e      	ldr	r2, [pc, #376]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042cc:	4b58      	ldr	r3, [pc, #352]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a57      	ldr	r2, [pc, #348]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a54      	ldr	r2, [pc, #336]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd f968 	bl	80015c0 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fd f964 	bl	80015c0 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0cb      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	4b49      	ldr	r3, [pc, #292]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <HAL_RCC_OscConfig+0x334>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fd f952 	bl	80015c0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd f94e 	bl	80015c0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0b5      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ee      	bne.n	8004320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	4a38      	ldr	r2, [pc, #224]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a1 	beq.w	80044a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b08      	cmp	r3, #8
 8004368:	d05c      	beq.n	8004424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d141      	bne.n	80043f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f922 	bl	80015c0 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd f91e 	bl	80015c0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e087      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	019b      	lsls	r3, r3, #6
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	3b01      	subs	r3, #1
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	491b      	ldr	r1, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fd f8f7 	bl	80015c0 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fd f8f3 	bl	80015c0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e05c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x416>
 80043f4:	e054      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd f8e0 	bl	80015c0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd f8dc 	bl	80015c0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e045      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x444>
 8004422:	e03d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e038      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x4ec>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d028      	beq.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d121      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d11a      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004474:	4293      	cmp	r3, r2
 8004476:	d111      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	3b01      	subs	r3, #1
 8004486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0cc      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b68      	ldr	r3, [pc, #416]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d90c      	bls.n	80044ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d044      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d119      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d003      	beq.n	800456e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e067      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4934      	ldr	r1, [pc, #208]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fd f80e 	bl	80015c0 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fd f80a 	bl	80015c0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b2b      	ldr	r3, [pc, #172]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20c      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b22      	ldr	r3, [pc, #136]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc ff6e 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	0800a8e4 	.word	0x0800a8e4
 8004674:	20000000 	.word	0x20000000
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b090      	sub	sp, #64	; 0x40
 8004682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
 8004688:	2300      	movs	r3, #0
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468c:	2300      	movs	r3, #0
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004694:	4b59      	ldr	r3, [pc, #356]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d00d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80a1 	bhi.w	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ae:	e09b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b53      	ldr	r3, [pc, #332]	; (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046b4:	e09b      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b6:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ba:	e098      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c6:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d028      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d2:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	2200      	movs	r2, #0
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	627a      	str	r2, [r7, #36]	; 0x24
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046e4:	2100      	movs	r1, #0
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	fb03 f201 	mul.w	r2, r3, r1
 80046ec:	2300      	movs	r3, #0
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	4a43      	ldr	r2, [pc, #268]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f6:	fba0 1202 	umull	r1, r2, r0, r2
 80046fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046fc:	460a      	mov	r2, r1
 80046fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004702:	4413      	add	r3, r2
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	2200      	movs	r2, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	61fa      	str	r2, [r7, #28]
 800470e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004716:	f7fb fd5d 	bl	80001d4 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4613      	mov	r3, r2
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	e053      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	2200      	movs	r2, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	617a      	str	r2, [r7, #20]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004736:	f04f 0b00 	mov.w	fp, #0
 800473a:	4652      	mov	r2, sl
 800473c:	465b      	mov	r3, fp
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474c:	0150      	lsls	r0, r2, #5
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	ebb2 080a 	subs.w	r8, r2, sl
 8004756:	eb63 090b 	sbc.w	r9, r3, fp
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800476a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800476e:	ebb2 0408 	subs.w	r4, r2, r8
 8004772:	eb63 0509 	sbc.w	r5, r3, r9
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	00eb      	lsls	r3, r5, #3
 8004780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004784:	00e2      	lsls	r2, r4, #3
 8004786:	4614      	mov	r4, r2
 8004788:	461d      	mov	r5, r3
 800478a:	eb14 030a 	adds.w	r3, r4, sl
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	eb45 030b 	adc.w	r3, r5, fp
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a2:	4629      	mov	r1, r5
 80047a4:	028b      	lsls	r3, r1, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ac:	4621      	mov	r1, r4
 80047ae:	028a      	lsls	r2, r1, #10
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	2200      	movs	r2, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c0:	f7fb fd08 	bl	80001d4 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3740      	adds	r7, #64	; 0x40
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00f42400 	.word	0x00f42400
 8004804:	017d7840 	.word	0x017d7840

08004808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	0800a8f4 	.word	0x0800a8f4

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800484c:	f7ff ffdc 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	0800a8f4 	.word	0x0800a8f4

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fc72 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fc7e 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d001      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e044      	b.n	80049b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x6c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d013      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x6c>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x6c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x6c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_TIM_Base_Start_IT+0xbc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x6c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d111      	bne.n	80049a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b06      	cmp	r3, #6
 800498c:	d010      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	e007      	b.n	80049b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40014000 	.word	0x40014000

080049d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e041      	b.n	8004a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f839 	bl	8004a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 fbcc 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_TIM_PWM_Start+0x24>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e022      	b.n	8004af2 <HAL_TIM_PWM_Start+0x6a>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d109      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0x3e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	bf14      	ite	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e015      	b.n	8004af2 <HAL_TIM_PWM_Start+0x6a>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d109      	bne.n	8004ae0 <HAL_TIM_PWM_Start+0x58>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e008      	b.n	8004af2 <HAL_TIM_PWM_Start+0x6a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e068      	b.n	8004bcc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x82>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b08:	e013      	b.n	8004b32 <HAL_TIM_PWM_Start+0xaa>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x92>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b18:	e00b      	b.n	8004b32 <HAL_TIM_PWM_Start+0xaa>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_PWM_Start+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fe7b 	bl	8005836 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <HAL_TIM_PWM_Start+0x14c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <HAL_TIM_PWM_Start+0x14c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x10e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x10e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <HAL_TIM_PWM_Start+0x150>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x10e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_TIM_PWM_Start+0x154>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x10e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <HAL_TIM_PWM_Start+0x158>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x10e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <HAL_TIM_PWM_Start+0x15c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d111      	bne.n	8004bba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d010      	beq.n	8004bca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	e007      	b.n	8004bca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000

08004be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d020      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01b      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0202 	mvn.w	r2, #2
 8004c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa9d 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa8f 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 faa0 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d020      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0204 	mvn.w	r2, #4
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa77 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa69 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa7a 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d020      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0208 	mvn.w	r2, #8
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa51 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa43 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fa54 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0210 	mvn.w	r2, #16
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2208      	movs	r2, #8
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa2b 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa1d 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa2e 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0201 	mvn.w	r2, #1
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fb fd54 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fdfc 	bl	8005970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f9ff 	bl	800519a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0220 	mvn.w	r2, #32
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fdce 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e0ae      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	f200 809f 	bhi.w	8004f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004f35 	.word	0x08004f35
 8004e04:	08004f35 	.word	0x08004f35
 8004e08:	08004f35 	.word	0x08004f35
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004f35 	.word	0x08004f35
 8004e14:	08004f35 	.word	0x08004f35
 8004e18:	08004f35 	.word	0x08004f35
 8004e1c:	08004eb3 	.word	0x08004eb3
 8004e20:	08004f35 	.word	0x08004f35
 8004e24:	08004f35 	.word	0x08004f35
 8004e28:	08004f35 	.word	0x08004f35
 8004e2c:	08004ef3 	.word	0x08004ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa46 	bl	80052c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0208 	orr.w	r2, r2, #8
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0204 	bic.w	r2, r2, #4
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]
      break;
 8004e6e:	e064      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fa8c 	bl	8005394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	619a      	str	r2, [r3, #24]
      break;
 8004eb0:	e043      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fad7 	bl	800546c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0208 	orr.w	r2, r2, #8
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0204 	bic.w	r2, r2, #4
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
      break;
 8004ef0:	e023      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fb21 	bl	8005540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	61da      	str	r2, [r3, #28]
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIM_ConfigClockSource+0x1c>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0b4      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x186>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d03e      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0xd4>
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	f200 8087 	bhi.w	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	f000 8086 	beq.w	80050be <HAL_TIM_ConfigClockSource+0x172>
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d87f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d01a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d87b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d050      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x11a>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d877      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b50      	cmp	r3, #80	; 0x50
 8004fca:	d03c      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xfa>
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d873      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d058      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x13a>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d86f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d064      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d86b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d060      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d867      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05c      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d05a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ff0:	e062      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	f000 fbf8 	bl	80057f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
      break;
 800501e:	e04f      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005030:	f000 fbe1 	bl	80057f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	609a      	str	r2, [r3, #8]
      break;
 8005044:	e03c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb55 	bl	8005702 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2150      	movs	r1, #80	; 0x50
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fbae 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 8005064:	e02c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fb74 	bl	8005760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2160      	movs	r1, #96	; 0x60
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb9e 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 8005084:	e01c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fb35 	bl	8005702 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fb8e 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fb85 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 80050b6:	e003      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e031      	b.n	8005156 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fa6b 	bl	80055e0 <TIM_SlaveTimer_SetConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e018      	b.n	8005156 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005132:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005142:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <TIM_Base_SetConfig+0xfc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00f      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d00b      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a37      	ldr	r2, [pc, #220]	; (80052b0 <TIM_Base_SetConfig+0x100>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a36      	ldr	r2, [pc, #216]	; (80052b4 <TIM_Base_SetConfig+0x104>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0x38>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a35      	ldr	r2, [pc, #212]	; (80052b8 <TIM_Base_SetConfig+0x108>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d108      	bne.n	80051fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <TIM_Base_SetConfig+0xfc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01b      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005208:	d017      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <TIM_Base_SetConfig+0x100>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <TIM_Base_SetConfig+0x104>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_Base_SetConfig+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a25      	ldr	r2, [pc, #148]	; (80052bc <TIM_Base_SetConfig+0x10c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <TIM_Base_SetConfig+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <TIM_Base_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <TIM_Base_SetConfig+0xfc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d105      	bne.n	800529e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]
  }
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0201 	bic.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0302 	bic.w	r3, r3, #2
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0308 	bic.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a13      	ldr	r2, [pc, #76]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d111      	bne.n	800536a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40010000 	.word	0x40010000

08005394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f023 0210 	bic.w	r2, r3, #16
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0320 	bic.w	r3, r3, #32
 80053de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <TIM_OC2_SetConfig+0xd4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC2_SetConfig+0xd4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d113      	bne.n	8005440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000

0800546c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1d      	ldr	r2, [pc, #116]	; (800553c <TIM_OC3_SetConfig+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10d      	bne.n	80054e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a14      	ldr	r2, [pc, #80]	; (800553c <TIM_OC3_SetConfig+0xd0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d113      	bne.n	8005516 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40010000 	.word	0x40010000

08005540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <TIM_OC4_SetConfig+0x9c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d109      	bne.n	80055b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000

080055e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b70      	cmp	r3, #112	; 0x70
 8005628:	d01a      	beq.n	8005660 <TIM_SlaveTimer_SetConfig+0x80>
 800562a:	2b70      	cmp	r3, #112	; 0x70
 800562c:	d860      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 800562e:	2b60      	cmp	r3, #96	; 0x60
 8005630:	d054      	beq.n	80056dc <TIM_SlaveTimer_SetConfig+0xfc>
 8005632:	2b60      	cmp	r3, #96	; 0x60
 8005634:	d85c      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 8005636:	2b50      	cmp	r3, #80	; 0x50
 8005638:	d046      	beq.n	80056c8 <TIM_SlaveTimer_SetConfig+0xe8>
 800563a:	2b50      	cmp	r3, #80	; 0x50
 800563c:	d858      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d019      	beq.n	8005676 <TIM_SlaveTimer_SetConfig+0x96>
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d854      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	d055      	beq.n	80056f6 <TIM_SlaveTimer_SetConfig+0x116>
 800564a:	2b30      	cmp	r3, #48	; 0x30
 800564c:	d850      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 800564e:	2b20      	cmp	r3, #32
 8005650:	d051      	beq.n	80056f6 <TIM_SlaveTimer_SetConfig+0x116>
 8005652:	2b20      	cmp	r3, #32
 8005654:	d84c      	bhi.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d04d      	beq.n	80056f6 <TIM_SlaveTimer_SetConfig+0x116>
 800565a:	2b10      	cmp	r3, #16
 800565c:	d04b      	beq.n	80056f6 <TIM_SlaveTimer_SetConfig+0x116>
 800565e:	e047      	b.n	80056f0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	f000 f8c1 	bl	80057f6 <TIM_ETR_SetConfig>
      break;
 8005674:	e040      	b.n	80056f8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d101      	bne.n	8005682 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e03b      	b.n	80056fa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
      break;
 80056c6:	e017      	b.n	80056f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d4:	461a      	mov	r2, r3
 80056d6:	f000 f814 	bl	8005702 <TIM_TI1_ConfigInputStage>
      break;
 80056da:	e00d      	b.n	80056f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e8:	461a      	mov	r2, r3
 80056ea:	f000 f839 	bl	8005760 <TIM_TI2_ConfigInputStage>
      break;
 80056ee:	e003      	b.n	80056f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
      break;
 80056f4:	e000      	b.n	80056f8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80056f6:	bf00      	nop
  }

  return status;
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0201 	bic.w	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 030a 	bic.w	r3, r3, #10
 800573e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	031b      	lsls	r3, r3, #12
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	f043 0307 	orr.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005810:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	021a      	lsls	r2, r3, #8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	431a      	orrs	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	609a      	str	r2, [r3, #8]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2201      	movs	r2, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	43db      	mvns	r3, r3
 8005858:	401a      	ands	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	431a      	orrs	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e050      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d013      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a16      	ldr	r2, [pc, #88]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a13      	ldr	r2, [pc, #76]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40014000 	.word	0x40014000

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e042      	b.n	8005a1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fcce 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fd07 	bl	80063dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d121      	bne.n	8005a82 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_Transmit_IT+0x26>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e01a      	b.n	8005a84 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	88fa      	ldrh	r2, [r7, #6]
 8005a5e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d112      	bne.n	8005ad0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_Receive_IT+0x26>
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00b      	b.n	8005ad2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fab0 	bl	800602c <UART_Start_Receive_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	e000      	b.n	8005ad2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b0ba      	sub	sp, #232	; 0xe8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_UART_IRQHandler+0x66>
 8005b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fb8f 	bl	800625e <UART_Receive_IT>
      return;
 8005b40:	e25b      	b.n	8005ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80de 	beq.w	8005d08 <HAL_UART_IRQHandler+0x22c>
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80d1 	beq.w	8005d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_UART_IRQHandler+0xae>
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f043 0201 	orr.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_UART_IRQHandler+0xd2>
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0202 	orr.w	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xf6>
 8005bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d011      	beq.n	8005c02 <HAL_UART_IRQHandler+0x126>
 8005bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d105      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 81f2 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_UART_IRQHandler+0x14e>
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb1a 	bl	800625e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_UART_IRQHandler+0x17a>
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d04f      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa22 	bl	80060a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d141      	bne.n	8005cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1d9      	bne.n	8005c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d013      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	4a7e      	ldr	r2, [pc, #504]	; (8005ebc <HAL_UART_IRQHandler+0x3e0>)
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fc fb18 	bl	8002300 <HAL_DMA_Abort_IT>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	e00e      	b.n	8005d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f98a 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cec:	e00a      	b.n	8005d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f986 	bl	8006000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e006      	b.n	8005d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f982 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d02:	e175      	b.n	8005ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	bf00      	nop
    return;
 8005d06:	e173      	b.n	8005ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	f040 814f 	bne.w	8005fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8148 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8141 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	f040 80b6 	bne.w	8005ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8145 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d72:	429a      	cmp	r2, r3
 8005d74:	f080 813e 	bcs.w	8005ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8a:	f000 8088 	beq.w	8005e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1d9      	bne.n	8005d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e1      	bne.n	8005dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e3      	bne.n	8005e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e3      	bne.n	8005e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fc f9c1 	bl	8002220 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8ad 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eba:	e09b      	b.n	8005ff4 <HAL_UART_IRQHandler+0x518>
 8005ebc:	08006167 	.word	0x08006167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 808e 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8089 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f0a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e3      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f42:	633a      	str	r2, [r7, #48]	; 0x30
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e3      	bne.n	8005f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f833 	bl	8006014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fae:	e023      	b.n	8005ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x4f4>
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8e0 	bl	800618e <UART_Transmit_IT>
    return;
 8005fce:	e014      	b.n	8005ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <HAL_UART_IRQHandler+0x51e>
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f920 	bl	800622e <UART_EndTransmit_IT>
    return;
 8005fee:	e004      	b.n	8005ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8005ff8:	bf00      	nop
  }
}
 8005ffa:	37e8      	adds	r7, #232	; 0xe8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2222      	movs	r2, #34	; 0x22
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006070:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0220 	orr.w	r2, r2, #32
 8006090:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b095      	sub	sp, #84	; 0x54
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060c8:	643a      	str	r2, [r7, #64]	; 0x40
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3314      	adds	r3, #20
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	2b01      	cmp	r3, #1
 8006116:	d119      	bne.n	800614c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	60bb      	str	r3, [r7, #8]
   return(result);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	647b      	str	r3, [r7, #68]	; 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006138:	61ba      	str	r2, [r7, #24]
 800613a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	613b      	str	r3, [r7, #16]
   return(result);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800615a:	bf00      	nop
 800615c:	3754      	adds	r7, #84	; 0x54
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff ff3d 	bl	8006000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b21      	cmp	r3, #33	; 0x21
 80061a0:	d13e      	bne.n	8006220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061aa:	d114      	bne.n	80061d6 <UART_Transmit_IT+0x48>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d110      	bne.n	80061d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]
 80061d4:	e008      	b.n	80061e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6211      	str	r1, [r2, #32]
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4619      	mov	r1, r3
 80061f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800620a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	e000      	b.n	8006222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fa fed6 	bl	8001000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b08c      	sub	sp, #48	; 0x30
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b22      	cmp	r3, #34	; 0x22
 8006270:	f040 80ae 	bne.w	80063d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627c:	d117      	bne.n	80062ae <UART_Receive_IT+0x50>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d113      	bne.n	80062ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	b29a      	uxth	r2, r3
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	1c9a      	adds	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
 80062ac:	e026      	b.n	80062fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c0:	d007      	beq.n	80062d2 <UART_Receive_IT+0x74>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <UART_Receive_IT+0x82>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e008      	b.n	80062f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4619      	mov	r1, r3
 800630a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800630c:	2b00      	cmp	r3, #0
 800630e:	d15d      	bne.n	80063cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0220 	bic.w	r2, r2, #32
 800631e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800632e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	2b01      	cmp	r3, #1
 8006354:	d135      	bne.n	80063c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	613b      	str	r3, [r7, #16]
   return(result);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	623a      	str	r2, [r7, #32]
 800637e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	69f9      	ldr	r1, [r7, #28]
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	61bb      	str	r3, [r7, #24]
   return(result);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b10      	cmp	r3, #16
 800639c:	d10a      	bne.n	80063b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fe2a 	bl	8006014 <HAL_UARTEx_RxEventCallback>
 80063c0:	e002      	b.n	80063c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fdc8 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	e002      	b.n	80063d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e000      	b.n	80063d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
  }
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3730      	adds	r7, #48	; 0x30
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b0c0      	sub	sp, #256	; 0x100
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	68d9      	ldr	r1, [r3, #12]
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	ea40 0301 	orr.w	r3, r0, r1
 8006404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	431a      	orrs	r2, r3
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	431a      	orrs	r2, r3
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006434:	f021 010c 	bic.w	r1, r1, #12
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006442:	430b      	orrs	r3, r1
 8006444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006456:	6999      	ldr	r1, [r3, #24]
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	ea40 0301 	orr.w	r3, r0, r1
 8006462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b8f      	ldr	r3, [pc, #572]	; (80066a8 <UART_SetConfig+0x2cc>)
 800646c:	429a      	cmp	r2, r3
 800646e:	d005      	beq.n	800647c <UART_SetConfig+0xa0>
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b8d      	ldr	r3, [pc, #564]	; (80066ac <UART_SetConfig+0x2d0>)
 8006478:	429a      	cmp	r2, r3
 800647a:	d104      	bne.n	8006486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800647c:	f7fe f9e4 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8006480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006484:	e003      	b.n	800648e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006486:	f7fe f9cb 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 800648a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	f040 810c 	bne.w	80066b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800649c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064ae:	4622      	mov	r2, r4
 80064b0:	462b      	mov	r3, r5
 80064b2:	1891      	adds	r1, r2, r2
 80064b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064b6:	415b      	adcs	r3, r3
 80064b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064be:	4621      	mov	r1, r4
 80064c0:	eb12 0801 	adds.w	r8, r2, r1
 80064c4:	4629      	mov	r1, r5
 80064c6:	eb43 0901 	adc.w	r9, r3, r1
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064de:	4690      	mov	r8, r2
 80064e0:	4699      	mov	r9, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	eb18 0303 	adds.w	r3, r8, r3
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064ec:	462b      	mov	r3, r5
 80064ee:	eb49 0303 	adc.w	r3, r9, r3
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800650a:	460b      	mov	r3, r1
 800650c:	18db      	adds	r3, r3, r3
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
 8006510:	4613      	mov	r3, r2
 8006512:	eb42 0303 	adc.w	r3, r2, r3
 8006516:	657b      	str	r3, [r7, #84]	; 0x54
 8006518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800651c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006520:	f7f9 fe58 	bl	80001d4 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4b61      	ldr	r3, [pc, #388]	; (80066b0 <UART_SetConfig+0x2d4>)
 800652a:	fba3 2302 	umull	r2, r3, r3, r2
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	011c      	lsls	r4, r3, #4
 8006532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006536:	2200      	movs	r2, #0
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	1891      	adds	r1, r2, r2
 800654a:	64b9      	str	r1, [r7, #72]	; 0x48
 800654c:	415b      	adcs	r3, r3
 800654e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006554:	4641      	mov	r1, r8
 8006556:	eb12 0a01 	adds.w	sl, r2, r1
 800655a:	4649      	mov	r1, r9
 800655c:	eb43 0b01 	adc.w	fp, r3, r1
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800656c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006574:	4692      	mov	sl, r2
 8006576:	469b      	mov	fp, r3
 8006578:	4643      	mov	r3, r8
 800657a:	eb1a 0303 	adds.w	r3, sl, r3
 800657e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006582:	464b      	mov	r3, r9
 8006584:	eb4b 0303 	adc.w	r3, fp, r3
 8006588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800659c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065a0:	460b      	mov	r3, r1
 80065a2:	18db      	adds	r3, r3, r3
 80065a4:	643b      	str	r3, [r7, #64]	; 0x40
 80065a6:	4613      	mov	r3, r2
 80065a8:	eb42 0303 	adc.w	r3, r2, r3
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
 80065ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065b6:	f7f9 fe0d 	bl	80001d4 <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <UART_SetConfig+0x2d4>)
 80065c2:	fba3 2301 	umull	r2, r3, r3, r1
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2264      	movs	r2, #100	; 0x64
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	1acb      	subs	r3, r1, r3
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065d6:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <UART_SetConfig+0x2d4>)
 80065d8:	fba3 2302 	umull	r2, r3, r3, r2
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065e4:	441c      	add	r4, r3
 80065e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	1891      	adds	r1, r2, r2
 80065fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006600:	415b      	adcs	r3, r3
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006608:	4641      	mov	r1, r8
 800660a:	1851      	adds	r1, r2, r1
 800660c:	6339      	str	r1, [r7, #48]	; 0x30
 800660e:	4649      	mov	r1, r9
 8006610:	414b      	adcs	r3, r1
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006620:	4659      	mov	r1, fp
 8006622:	00cb      	lsls	r3, r1, #3
 8006624:	4651      	mov	r1, sl
 8006626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800662a:	4651      	mov	r1, sl
 800662c:	00ca      	lsls	r2, r1, #3
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	4603      	mov	r3, r0
 8006634:	4642      	mov	r2, r8
 8006636:	189b      	adds	r3, r3, r2
 8006638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800663c:	464b      	mov	r3, r9
 800663e:	460a      	mov	r2, r1
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800665c:	460b      	mov	r3, r1
 800665e:	18db      	adds	r3, r3, r3
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
 8006662:	4613      	mov	r3, r2
 8006664:	eb42 0303 	adc.w	r3, r2, r3
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800666e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006672:	f7f9 fdaf 	bl	80001d4 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <UART_SetConfig+0x2d4>)
 800667c:	fba3 1302 	umull	r1, r3, r3, r2
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	2164      	movs	r1, #100	; 0x64
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	3332      	adds	r3, #50	; 0x32
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <UART_SetConfig+0x2d4>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	f003 0207 	and.w	r2, r3, #7
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4422      	add	r2, r4
 80066a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066a4:	e106      	b.n	80068b4 <UART_SetConfig+0x4d8>
 80066a6:	bf00      	nop
 80066a8:	40011000 	.word	0x40011000
 80066ac:	40011400 	.word	0x40011400
 80066b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	1891      	adds	r1, r2, r2
 80066cc:	6239      	str	r1, [r7, #32]
 80066ce:	415b      	adcs	r3, r3
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
 80066d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066d6:	4641      	mov	r1, r8
 80066d8:	1854      	adds	r4, r2, r1
 80066da:	4649      	mov	r1, r9
 80066dc:	eb43 0501 	adc.w	r5, r3, r1
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	00eb      	lsls	r3, r5, #3
 80066ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ee:	00e2      	lsls	r2, r4, #3
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	4643      	mov	r3, r8
 80066f6:	18e3      	adds	r3, r4, r3
 80066f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066fc:	464b      	mov	r3, r9
 80066fe:	eb45 0303 	adc.w	r3, r5, r3
 8006702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006722:	4629      	mov	r1, r5
 8006724:	008b      	lsls	r3, r1, #2
 8006726:	4621      	mov	r1, r4
 8006728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800672c:	4621      	mov	r1, r4
 800672e:	008a      	lsls	r2, r1, #2
 8006730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006734:	f7f9 fd4e 	bl	80001d4 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4b60      	ldr	r3, [pc, #384]	; (80068c0 <UART_SetConfig+0x4e4>)
 800673e:	fba3 2302 	umull	r2, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	011c      	lsls	r4, r3, #4
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	1891      	adds	r1, r2, r2
 800675e:	61b9      	str	r1, [r7, #24]
 8006760:	415b      	adcs	r3, r3
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006768:	4641      	mov	r1, r8
 800676a:	1851      	adds	r1, r2, r1
 800676c:	6139      	str	r1, [r7, #16]
 800676e:	4649      	mov	r1, r9
 8006770:	414b      	adcs	r3, r1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006780:	4659      	mov	r1, fp
 8006782:	00cb      	lsls	r3, r1, #3
 8006784:	4651      	mov	r1, sl
 8006786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678a:	4651      	mov	r1, sl
 800678c:	00ca      	lsls	r2, r1, #3
 800678e:	4610      	mov	r0, r2
 8006790:	4619      	mov	r1, r3
 8006792:	4603      	mov	r3, r0
 8006794:	4642      	mov	r2, r8
 8006796:	189b      	adds	r3, r3, r2
 8006798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679c:	464b      	mov	r3, r9
 800679e:	460a      	mov	r2, r1
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067c0:	4649      	mov	r1, r9
 80067c2:	008b      	lsls	r3, r1, #2
 80067c4:	4641      	mov	r1, r8
 80067c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ca:	4641      	mov	r1, r8
 80067cc:	008a      	lsls	r2, r1, #2
 80067ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067d2:	f7f9 fcff 	bl	80001d4 <__aeabi_uldivmod>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	4b38      	ldr	r3, [pc, #224]	; (80068c0 <UART_SetConfig+0x4e4>)
 80067de:	fba3 2301 	umull	r2, r3, r3, r1
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2264      	movs	r2, #100	; 0x64
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	1acb      	subs	r3, r1, r3
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	3332      	adds	r3, #50	; 0x32
 80067f0:	4a33      	ldr	r2, [pc, #204]	; (80068c0 <UART_SetConfig+0x4e4>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fc:	441c      	add	r4, r3
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006802:	2200      	movs	r2, #0
 8006804:	673b      	str	r3, [r7, #112]	; 0x70
 8006806:	677a      	str	r2, [r7, #116]	; 0x74
 8006808:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	415b      	adcs	r3, r3
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800681c:	4641      	mov	r1, r8
 800681e:	1851      	adds	r1, r2, r1
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	4649      	mov	r1, r9
 8006824:	414b      	adcs	r3, r1
 8006826:	607b      	str	r3, [r7, #4]
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006834:	4659      	mov	r1, fp
 8006836:	00cb      	lsls	r3, r1, #3
 8006838:	4651      	mov	r1, sl
 800683a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683e:	4651      	mov	r1, sl
 8006840:	00ca      	lsls	r2, r1, #3
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	4603      	mov	r3, r0
 8006848:	4642      	mov	r2, r8
 800684a:	189b      	adds	r3, r3, r2
 800684c:	66bb      	str	r3, [r7, #104]	; 0x68
 800684e:	464b      	mov	r3, r9
 8006850:	460a      	mov	r2, r1
 8006852:	eb42 0303 	adc.w	r3, r2, r3
 8006856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	663b      	str	r3, [r7, #96]	; 0x60
 8006862:	667a      	str	r2, [r7, #100]	; 0x64
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006870:	4649      	mov	r1, r9
 8006872:	008b      	lsls	r3, r1, #2
 8006874:	4641      	mov	r1, r8
 8006876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800687a:	4641      	mov	r1, r8
 800687c:	008a      	lsls	r2, r1, #2
 800687e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006882:	f7f9 fca7 	bl	80001d4 <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <UART_SetConfig+0x4e4>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	2164      	movs	r1, #100	; 0x64
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	3332      	adds	r3, #50	; 0x32
 800689e:	4a08      	ldr	r2, [pc, #32]	; (80068c0 <UART_SetConfig+0x4e4>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4422      	add	r2, r4
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c0:	51eb851f 	.word	0x51eb851f

080068c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 001c 	add.w	r0, r7, #28
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068d6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d123      	bne.n	8006926 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800690a:	2b01      	cmp	r3, #1
 800690c:	d105      	bne.n	800691a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fae2 	bl	8007ee4 <USB_CoreReset>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e01b      	b.n	800695e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fad6 	bl	8007ee4 <USB_CoreReset>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800693c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
 8006950:	e005      	b.n	800695e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800695e:	7fbb      	ldrb	r3, [r7, #30]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10b      	bne.n	800697c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f043 0206 	orr.w	r2, r3, #6
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006988:	b004      	add	sp, #16
 800698a:	4770      	bx	lr

0800698c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d165      	bne.n	8006a6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a41      	ldr	r2, [pc, #260]	; (8006aa8 <USB_SetTurnaroundTime+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d906      	bls.n	80069b6 <USB_SetTurnaroundTime+0x2a>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4a40      	ldr	r2, [pc, #256]	; (8006aac <USB_SetTurnaroundTime+0x120>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d202      	bcs.n	80069b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069b0:	230f      	movs	r3, #15
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e062      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <USB_SetTurnaroundTime+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d306      	bcc.n	80069cc <USB_SetTurnaroundTime+0x40>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <USB_SetTurnaroundTime+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d202      	bcs.n	80069cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069c6:	230e      	movs	r3, #14
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e057      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a38      	ldr	r2, [pc, #224]	; (8006ab0 <USB_SetTurnaroundTime+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d306      	bcc.n	80069e2 <USB_SetTurnaroundTime+0x56>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a37      	ldr	r2, [pc, #220]	; (8006ab4 <USB_SetTurnaroundTime+0x128>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d202      	bcs.n	80069e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069dc:	230d      	movs	r3, #13
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e04c      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a33      	ldr	r2, [pc, #204]	; (8006ab4 <USB_SetTurnaroundTime+0x128>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d306      	bcc.n	80069f8 <USB_SetTurnaroundTime+0x6c>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4a32      	ldr	r2, [pc, #200]	; (8006ab8 <USB_SetTurnaroundTime+0x12c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d802      	bhi.n	80069f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069f2:	230c      	movs	r3, #12
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e041      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a2f      	ldr	r2, [pc, #188]	; (8006ab8 <USB_SetTurnaroundTime+0x12c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d906      	bls.n	8006a0e <USB_SetTurnaroundTime+0x82>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4a2e      	ldr	r2, [pc, #184]	; (8006abc <USB_SetTurnaroundTime+0x130>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d802      	bhi.n	8006a0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a08:	230b      	movs	r3, #11
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e036      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a2a      	ldr	r2, [pc, #168]	; (8006abc <USB_SetTurnaroundTime+0x130>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d906      	bls.n	8006a24 <USB_SetTurnaroundTime+0x98>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4a29      	ldr	r2, [pc, #164]	; (8006ac0 <USB_SetTurnaroundTime+0x134>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d802      	bhi.n	8006a24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a1e:	230a      	movs	r3, #10
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e02b      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <USB_SetTurnaroundTime+0x134>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d906      	bls.n	8006a3a <USB_SetTurnaroundTime+0xae>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <USB_SetTurnaroundTime+0x138>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d202      	bcs.n	8006a3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a34:	2309      	movs	r3, #9
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e020      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <USB_SetTurnaroundTime+0x138>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d306      	bcc.n	8006a50 <USB_SetTurnaroundTime+0xc4>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <USB_SetTurnaroundTime+0x13c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d802      	bhi.n	8006a50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e015      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <USB_SetTurnaroundTime+0x13c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d906      	bls.n	8006a66 <USB_SetTurnaroundTime+0xda>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <USB_SetTurnaroundTime+0x140>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d202      	bcs.n	8006a66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a60:	2307      	movs	r3, #7
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e00a      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a66:	2306      	movs	r3, #6
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e007      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a72:	2309      	movs	r3, #9
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e001      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a78:	2309      	movs	r3, #9
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	00d8acbf 	.word	0x00d8acbf
 8006aac:	00e4e1c0 	.word	0x00e4e1c0
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	01067380 	.word	0x01067380
 8006ab8:	011a499f 	.word	0x011a499f
 8006abc:	01312cff 	.word	0x01312cff
 8006ac0:	014ca43f 	.word	0x014ca43f
 8006ac4:	016e3600 	.word	0x016e3600
 8006ac8:	01a6ab1f 	.word	0x01a6ab1f
 8006acc:	01e84800 	.word	0x01e84800

08006ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f043 0201 	orr.w	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d115      	bne.n	8006b62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b42:	200a      	movs	r0, #10
 8006b44:	f7fa fd48 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	330a      	adds	r3, #10
 8006b4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f939 	bl	8007dc6 <USB_GetMode>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d01e      	beq.n	8006b98 <USB_SetCurrentMode+0x84>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2bc7      	cmp	r3, #199	; 0xc7
 8006b5e:	d9f0      	bls.n	8006b42 <USB_SetCurrentMode+0x2e>
 8006b60:	e01a      	b.n	8006b98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d115      	bne.n	8006b94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b74:	200a      	movs	r0, #10
 8006b76:	f7fa fd2f 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	330a      	adds	r3, #10
 8006b7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f920 	bl	8007dc6 <USB_GetMode>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <USB_SetCurrentMode+0x84>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2bc7      	cmp	r3, #199	; 0xc7
 8006b90:	d9f0      	bls.n	8006b74 <USB_SetCurrentMode+0x60>
 8006b92:	e001      	b.n	8006b98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e005      	b.n	8006ba4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2bc8      	cmp	r3, #200	; 0xc8
 8006b9c:	d101      	bne.n	8006ba2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bac:	b084      	sub	sp, #16
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	e009      	b.n	8006be0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3340      	adds	r3, #64	; 0x40
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0e      	cmp	r3, #14
 8006be4:	d9f2      	bls.n	8006bcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006be6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d11c      	bne.n	8006c28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
 8006c00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
 8006c26:	e00b      	b.n	8006c40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d10d      	bne.n	8006c70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f968 	bl	8006f34 <USB_SetDevSpeed>
 8006c64:	e008      	b.n	8006c78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c66:	2101      	movs	r1, #1
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f963 	bl	8006f34 <USB_SetDevSpeed>
 8006c6e:	e003      	b.n	8006c78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c70:	2103      	movs	r1, #3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f95e 	bl	8006f34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c78:	2110      	movs	r1, #16
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8fa 	bl	8006e74 <USB_FlushTxFifo>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f924 	bl	8006ed8 <USB_FlushRxFifo>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	461a      	mov	r2, r3
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e043      	b.n	8006d4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cda:	d118      	bne.n	8006d0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e013      	b.n	8006d20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e008      	b.n	8006d20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d50:	461a      	mov	r2, r3
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d3b5      	bcc.n	8006cc4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	e043      	b.n	8006de6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d118      	bne.n	8006da8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e013      	b.n	8006dba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e008      	b.n	8006dba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	461a      	mov	r2, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3301      	adds	r3, #1
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006dea:	461a      	mov	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d3b5      	bcc.n	8006d5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <USB_DevInit+0x2c4>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f043 0208 	orr.w	r2, r3, #8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d107      	bne.n	8006e60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e58:	f043 0304 	orr.w	r3, r3, #4
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e6c:	b004      	add	sp, #16
 8006e6e:	4770      	bx	lr
 8006e70:	803c3800 	.word	0x803c3800

08006e74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e8e:	d901      	bls.n	8006e94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e01b      	b.n	8006ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	daf2      	bge.n	8006e82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	019b      	lsls	r3, r3, #6
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006eb8:	d901      	bls.n	8006ebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e006      	b.n	8006ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d0f0      	beq.n	8006eac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ef0:	d901      	bls.n	8006ef6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e018      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	daf2      	bge.n	8006ee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2210      	movs	r2, #16
 8006f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f14:	d901      	bls.n	8006f1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e006      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d0f0      	beq.n	8006f08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f54:	4313      	orrs	r3, r2
 8006f56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b087      	sub	sp, #28
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0306 	and.w	r3, r3, #6
 8006f7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
 8006f8a:	e00a      	b.n	8006fa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d002      	beq.n	8006f98 <USB_GetDevSpeed+0x32>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	d102      	bne.n	8006f9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	75fb      	strb	r3, [r7, #23]
 8006f9c:	e001      	b.n	8006fa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f9e:	230f      	movs	r3, #15
 8006fa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d13a      	bne.n	8007042 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2101      	movs	r1, #1
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d155      	bne.n	80070b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007020:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	059b      	lsls	r3, r3, #22
 8007026:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007028:	4313      	orrs	r3, r2
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	e036      	b.n	80070b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f303 	lsl.w	r3, r1, r3
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007060:	4313      	orrs	r3, r2
 8007062:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d11a      	bne.n	80070b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007096:	430b      	orrs	r3, r1
 8007098:	4313      	orrs	r3, r2
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d161      	bne.n	80071a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f2:	d11f      	bne.n	8007134 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007112:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	2101      	movs	r1, #1
 8007146:	fa01 f303 	lsl.w	r3, r1, r3
 800714a:	b29b      	uxth	r3, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007154:	4013      	ands	r3, r2
 8007156:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	2101      	movs	r1, #1
 800716a:	fa01 f303 	lsl.w	r3, r1, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007178:	4013      	ands	r3, r2
 800717a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	0159      	lsls	r1, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	440b      	add	r3, r1
 8007192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007196:	4619      	mov	r1, r3
 8007198:	4b35      	ldr	r3, [pc, #212]	; (8007270 <USB_DeactivateEndpoint+0x1b0>)
 800719a:	4013      	ands	r3, r2
 800719c:	600b      	str	r3, [r1, #0]
 800719e:	e060      	b.n	8007262 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b6:	d11f      	bne.n	80071f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 030f 	and.w	r3, r3, #15
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f303 	lsl.w	r3, r1, r3
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	43db      	mvns	r3, r3
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4013      	ands	r3, r2
 800721a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	43db      	mvns	r3, r3
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800723c:	4013      	ands	r3, r2
 800723e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	0159      	lsls	r1, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	440b      	add	r3, r1
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	4619      	mov	r1, r3
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <USB_DeactivateEndpoint+0x1b4>)
 800725e:	4013      	ands	r3, r2
 8007260:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	ec337800 	.word	0xec337800
 8007274:	eff37800 	.word	0xeff37800

08007278 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	f040 817a 	bne.w	800758e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d132      	bne.n	8007308 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007300:	0cdb      	lsrs	r3, r3, #19
 8007302:	04db      	lsls	r3, r3, #19
 8007304:	6113      	str	r3, [r2, #16]
 8007306:	e092      	b.n	800742e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007322:	0cdb      	lsrs	r3, r3, #19
 8007324:	04db      	lsls	r3, r3, #19
 8007326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	0151      	lsls	r1, r2, #5
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	440a      	add	r2, r1
 800733e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800734a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d11a      	bne.n	8007388 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	d903      	bls.n	8007366 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007384:	6113      	str	r3, [r2, #16]
 8007386:	e01b      	b.n	80073c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007394:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6919      	ldr	r1, [r3, #16]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	440b      	add	r3, r1
 80073a0:	1e59      	subs	r1, r3, #1
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073ac:	4ba2      	ldr	r3, [pc, #648]	; (8007638 <USB_EPStartXfer+0x3c0>)
 80073ae:	400b      	ands	r3, r1
 80073b0:	69b9      	ldr	r1, [r7, #24]
 80073b2:	0148      	lsls	r0, r1, #5
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	4401      	add	r1, r0
 80073b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d6:	69b9      	ldr	r1, [r7, #24]
 80073d8:	0148      	lsls	r0, r1, #5
 80073da:	69f9      	ldr	r1, [r7, #28]
 80073dc:	4401      	add	r1, r0
 80073de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073e2:	4313      	orrs	r3, r2
 80073e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	791b      	ldrb	r3, [r3, #4]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d11f      	bne.n	800742e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007408:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800740c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800742c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d14b      	bne.n	80074cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	461a      	mov	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	791b      	ldrb	r3, [r3, #4]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d128      	bne.n	80074aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d110      	bne.n	800748a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e00f      	b.n	80074aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e165      	b.n	8007798 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d015      	beq.n	8007520 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 814d 	beq.w	8007798 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	2101      	movs	r1, #1
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	69f9      	ldr	r1, [r7, #28]
 8007516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800751a:	4313      	orrs	r3, r2
 800751c:	634b      	str	r3, [r1, #52]	; 0x34
 800751e:	e13b      	b.n	8007798 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d110      	bne.n	8007552 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e00f      	b.n	8007572 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	68d9      	ldr	r1, [r3, #12]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	b298      	uxth	r0, r3
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4603      	mov	r3, r0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f9b8 	bl	80078fc <USB_WritePacket>
 800758c:	e104      	b.n	8007798 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a8:	0cdb      	lsrs	r3, r3, #19
 80075aa:	04db      	lsls	r3, r3, #19
 80075ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075d0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d131      	bne.n	800763c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	69b9      	ldr	r1, [r7, #24]
 8007608:	0148      	lsls	r0, r1, #5
 800760a:	69f9      	ldr	r1, [r7, #28]
 800760c:	4401      	add	r1, r0
 800760e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007612:	4313      	orrs	r3, r2
 8007614:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007634:	6113      	str	r3, [r2, #16]
 8007636:	e061      	b.n	80076fc <USB_EPStartXfer+0x484>
 8007638:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d123      	bne.n	800768c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765a:	69b9      	ldr	r1, [r7, #24]
 800765c:	0148      	lsls	r0, r1, #5
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	4401      	add	r1, r0
 8007662:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	0151      	lsls	r1, r2, #5
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	440a      	add	r2, r1
 8007680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007688:	6113      	str	r3, [r2, #16]
 800768a:	e037      	b.n	80076fc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	4413      	add	r3, r2
 8007696:	1e5a      	subs	r2, r3, #1
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	8afa      	ldrh	r2, [r7, #22]
 80076a8:	fb03 f202 	mul.w	r2, r3, r2
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	8afb      	ldrh	r3, [r7, #22]
 80076c0:	04d9      	lsls	r1, r3, #19
 80076c2:	4b38      	ldr	r3, [pc, #224]	; (80077a4 <USB_EPStartXfer+0x52c>)
 80076c4:	400b      	ands	r3, r1
 80076c6:	69b9      	ldr	r1, [r7, #24]
 80076c8:	0148      	lsls	r0, r1, #5
 80076ca:	69f9      	ldr	r1, [r7, #28]
 80076cc:	4401      	add	r1, r0
 80076ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d2:	4313      	orrs	r3, r2
 80076d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ec:	69b9      	ldr	r1, [r7, #24]
 80076ee:	0148      	lsls	r0, r1, #5
 80076f0:	69f9      	ldr	r1, [r7, #28]
 80076f2:	4401      	add	r1, r0
 80076f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076f8:	4313      	orrs	r3, r2
 80076fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d10d      	bne.n	800771e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	68d9      	ldr	r1, [r3, #12]
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	460a      	mov	r2, r1
 800771c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d128      	bne.n	8007778 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d110      	bne.n	8007758 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	440a      	add	r2, r1
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e00f      	b.n	8007778 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	440a      	add	r2, r1
 800776e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	1ff80000 	.word	0x1ff80000

080077a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d14a      	bne.n	800785c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077de:	f040 8086 	bne.w	80078ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007800:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007804:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	7812      	ldrb	r2, [r2, #0]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f242 7210 	movw	r2, #10000	; 0x2710
 8007836:	4293      	cmp	r3, r2
 8007838:	d902      	bls.n	8007840 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
          break;
 800783e:	e056      	b.n	80078ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007858:	d0e7      	beq.n	800782a <USB_EPStopXfer+0x82>
 800785a:	e048      	b.n	80078ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007874:	d13b      	bne.n	80078ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007894:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007898:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d902      	bls.n	80078d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	75fb      	strb	r3, [r7, #23]
          break;
 80078d2:	e00c      	b.n	80078ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ec:	d0e7      	beq.n	80078be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b089      	sub	sp, #36	; 0x24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4611      	mov	r1, r2
 8007908:	461a      	mov	r2, r3
 800790a:	460b      	mov	r3, r1
 800790c:	71fb      	strb	r3, [r7, #7]
 800790e:	4613      	mov	r3, r2
 8007910:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800791a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800791e:	2b00      	cmp	r3, #0
 8007920:	d123      	bne.n	800796a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007922:	88bb      	ldrh	r3, [r7, #4]
 8007924:	3303      	adds	r3, #3
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800792a:	2300      	movs	r3, #0
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	e018      	b.n	8007962 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	031a      	lsls	r2, r3, #12
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4413      	add	r3, r2
 8007938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793c:	461a      	mov	r2, r3
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	3301      	adds	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3301      	adds	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	3301      	adds	r3, #1
 8007954:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	3301      	adds	r3, #1
 800795a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	3301      	adds	r3, #1
 8007960:	61bb      	str	r3, [r7, #24]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d3e2      	bcc.n	8007930 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3724      	adds	r7, #36	; 0x24
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007978:	b480      	push	{r7}
 800797a:	b08b      	sub	sp, #44	; 0x2c
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	b29b      	uxth	r3, r3
 8007994:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800799e:	2300      	movs	r3, #0
 80079a0:	623b      	str	r3, [r7, #32]
 80079a2:	e014      	b.n	80079ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	3301      	adds	r3, #1
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	3301      	adds	r3, #1
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	3301      	adds	r3, #1
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	3301      	adds	r3, #1
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	3301      	adds	r3, #1
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3a      	ldr	r2, [r7, #32]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d3e6      	bcc.n	80079a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079d6:	8bfb      	ldrh	r3, [r7, #30]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01e      	beq.n	8007a1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e6:	461a      	mov	r2, r3
 80079e8:	f107 0310 	add.w	r3, r7, #16
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	701a      	strb	r2, [r3, #0]
      i++;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	3301      	adds	r3, #1
 8007a06:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a0e:	8bfb      	ldrh	r3, [r7, #30]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a14:	8bfb      	ldrh	r3, [r7, #30]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1ea      	bne.n	80079f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	372c      	adds	r7, #44	; 0x2c
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d12c      	bne.n	8007a9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db12      	blt.n	8007a7c <USB_EPSetStall+0x54>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00f      	beq.n	8007a7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e02b      	b.n	8007af6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	db12      	blt.n	8007ad6 <USB_EPSetStall+0xae>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ad4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007af4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d128      	bne.n	8007b72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	791b      	ldrb	r3, [r3, #4]
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d003      	beq.n	8007b50 <USB_EPClearStall+0x4c>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d138      	bne.n	8007bc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	e027      	b.n	8007bc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d003      	beq.n	8007ba2 <USB_EPClearStall+0x9e>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d10f      	bne.n	8007bc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bf2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c04:	68f9      	ldr	r1, [r7, #12]
 8007c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4a:	f023 0302 	bic.w	r3, r3, #2
 8007c4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c78:	f023 0303 	bic.w	r3, r3, #3
 8007c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0c1b      	lsrs	r3, r3, #16
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	b29b      	uxth	r3, r3
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9a:	01db      	lsls	r3, r3, #7
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4013      	ands	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007db8:	68bb      	ldr	r3, [r7, #8]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	460b      	mov	r3, r1
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	333c      	adds	r3, #60	; 0x3c
 8007e3e:	3304      	adds	r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4a26      	ldr	r2, [pc, #152]	; (8007ee0 <USB_EP0_OutStart+0xb8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d90a      	bls.n	8007e62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e5c:	d101      	bne.n	8007e62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e037      	b.n	8007ed2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e90:	f043 0318 	orr.w	r3, r3, #24
 8007e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ea8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10f      	bne.n	8007ed0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ece:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	4f54300a 	.word	0x4f54300a

08007ee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007efc:	d901      	bls.n	8007f02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e01b      	b.n	8007f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	daf2      	bge.n	8007ef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f043 0201 	orr.w	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f26:	d901      	bls.n	8007f2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e006      	b.n	8007f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d0f0      	beq.n	8007f1a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f58:	f002 fc24 	bl	800a7a4 <USBD_static_malloc>
 8007f5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	32b0      	adds	r2, #176	; 0xb0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e0d4      	b.n	8008122 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f78:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f002 fc54 	bl	800a82c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32b0      	adds	r2, #176	; 0xb0
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32b0      	adds	r2, #176	; 0xb0
 8007f9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7c1b      	ldrb	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d138      	bne.n	8008022 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fb0:	4b5e      	ldr	r3, [pc, #376]	; (800812c <USBD_CDC_Init+0x1e4>)
 8007fb2:	7819      	ldrb	r1, [r3, #0]
 8007fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb8:	2202      	movs	r2, #2
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f002 facf 	bl	800a55e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fc0:	4b5a      	ldr	r3, [pc, #360]	; (800812c <USBD_CDC_Init+0x1e4>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fda:	4b55      	ldr	r3, [pc, #340]	; (8008130 <USBD_CDC_Init+0x1e8>)
 8007fdc:	7819      	ldrb	r1, [r3, #0]
 8007fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f002 faba 	bl	800a55e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fea:	4b51      	ldr	r3, [pc, #324]	; (8008130 <USBD_CDC_Init+0x1e8>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 020f 	and.w	r2, r3, #15
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008002:	2201      	movs	r2, #1
 8008004:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008006:	4b4b      	ldr	r3, [pc, #300]	; (8008134 <USBD_CDC_Init+0x1ec>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3326      	adds	r3, #38	; 0x26
 800801c:	2210      	movs	r2, #16
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	e035      	b.n	800808e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008022:	4b42      	ldr	r3, [pc, #264]	; (800812c <USBD_CDC_Init+0x1e4>)
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	2340      	movs	r3, #64	; 0x40
 8008028:	2202      	movs	r2, #2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f002 fa97 	bl	800a55e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008030:	4b3e      	ldr	r3, [pc, #248]	; (800812c <USBD_CDC_Init+0x1e4>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3324      	adds	r3, #36	; 0x24
 8008046:	2201      	movs	r2, #1
 8008048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800804a:	4b39      	ldr	r3, [pc, #228]	; (8008130 <USBD_CDC_Init+0x1e8>)
 800804c:	7819      	ldrb	r1, [r3, #0]
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2202      	movs	r2, #2
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f002 fa83 	bl	800a55e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008058:	4b35      	ldr	r3, [pc, #212]	; (8008130 <USBD_CDC_Init+0x1e8>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008070:	2201      	movs	r2, #1
 8008072:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008074:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <USBD_CDC_Init+0x1ec>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	3326      	adds	r3, #38	; 0x26
 800808a:	2210      	movs	r2, #16
 800808c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800808e:	4b29      	ldr	r3, [pc, #164]	; (8008134 <USBD_CDC_Init+0x1ec>)
 8008090:	7819      	ldrb	r1, [r3, #0]
 8008092:	2308      	movs	r3, #8
 8008094:	2203      	movs	r2, #3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f002 fa61 	bl	800a55e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800809c:	4b25      	ldr	r3, [pc, #148]	; (8008134 <USBD_CDC_Init+0x1ec>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f003 020f 	and.w	r2, r3, #15
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	3324      	adds	r3, #36	; 0x24
 80080b2:	2201      	movs	r2, #1
 80080b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	33b0      	adds	r3, #176	; 0xb0
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080ec:	2302      	movs	r3, #2
 80080ee:	e018      	b.n	8008122 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7c1b      	ldrb	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080f8:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <USBD_CDC_Init+0x1e8>)
 80080fa:	7819      	ldrb	r1, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f002 fb18 	bl	800a73c <USBD_LL_PrepareReceive>
 800810c:	e008      	b.n	8008120 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <USBD_CDC_Init+0x1e8>)
 8008110:	7819      	ldrb	r1, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f002 fb0e 	bl	800a73c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000093 	.word	0x20000093
 8008130:	20000094 	.word	0x20000094
 8008134:	20000095 	.word	0x20000095

08008138 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008144:	4b3a      	ldr	r3, [pc, #232]	; (8008230 <USBD_CDC_DeInit+0xf8>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f002 fa2d 	bl	800a5aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008150:	4b37      	ldr	r3, [pc, #220]	; (8008230 <USBD_CDC_DeInit+0xf8>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	f003 020f 	and.w	r2, r3, #15
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	3324      	adds	r3, #36	; 0x24
 8008166:	2200      	movs	r2, #0
 8008168:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800816a:	4b32      	ldr	r3, [pc, #200]	; (8008234 <USBD_CDC_DeInit+0xfc>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 fa1a 	bl	800a5aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008176:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <USBD_CDC_DeInit+0xfc>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f003 020f 	and.w	r2, r3, #15
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800818e:	2200      	movs	r2, #0
 8008190:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008192:	4b29      	ldr	r3, [pc, #164]	; (8008238 <USBD_CDC_DeInit+0x100>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f002 fa06 	bl	800a5aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800819e:	4b26      	ldr	r3, [pc, #152]	; (8008238 <USBD_CDC_DeInit+0x100>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 020f 	and.w	r2, r3, #15
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	2200      	movs	r2, #0
 80081b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081b8:	4b1f      	ldr	r3, [pc, #124]	; (8008238 <USBD_CDC_DeInit+0x100>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3326      	adds	r3, #38	; 0x26
 80081ce:	2200      	movs	r2, #0
 80081d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	32b0      	adds	r2, #176	; 0xb0
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01f      	beq.n	8008224 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	33b0      	adds	r3, #176	; 0xb0
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32b0      	adds	r2, #176	; 0xb0
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	4618      	mov	r0, r3
 8008208:	f002 fada 	bl	800a7c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32b0      	adds	r2, #176	; 0xb0
 8008216:	2100      	movs	r1, #0
 8008218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000093 	.word	0x20000093
 8008234:	20000094 	.word	0x20000094
 8008238:	20000095 	.word	0x20000095

0800823c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	32b0      	adds	r2, #176	; 0xb0
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e0bf      	b.n	80083ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008274:	2b00      	cmp	r3, #0
 8008276:	d050      	beq.n	800831a <USBD_CDC_Setup+0xde>
 8008278:	2b20      	cmp	r3, #32
 800827a:	f040 80af 	bne.w	80083dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d03a      	beq.n	80082fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b25b      	sxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	da1b      	bge.n	80082c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	33b0      	adds	r3, #176	; 0xb0
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	88d2      	ldrh	r2, [r2, #6]
 80082ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	88db      	ldrh	r3, [r3, #6]
 80082b2:	2b07      	cmp	r3, #7
 80082b4:	bf28      	it	cs
 80082b6:	2307      	movcs	r3, #7
 80082b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	89fa      	ldrh	r2, [r7, #14]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fd49 	bl	8009d58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082c6:	e090      	b.n	80083ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	785a      	ldrb	r2, [r3, #1]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88db      	ldrh	r3, [r3, #6]
 80082d6:	2b3f      	cmp	r3, #63	; 0x3f
 80082d8:	d803      	bhi.n	80082e2 <USBD_CDC_Setup+0xa6>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	88db      	ldrh	r3, [r3, #6]
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	e000      	b.n	80082e4 <USBD_CDC_Setup+0xa8>
 80082e2:	2240      	movs	r2, #64	; 0x40
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082ea:	6939      	ldr	r1, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80082f2:	461a      	mov	r2, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fd5b 	bl	8009db0 <USBD_CtlPrepareRx>
      break;
 80082fa:	e076      	b.n	80083ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	33b0      	adds	r3, #176	; 0xb0
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	7850      	ldrb	r0, [r2, #1]
 8008312:	2200      	movs	r2, #0
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	4798      	blx	r3
      break;
 8008318:	e067      	b.n	80083ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b0b      	cmp	r3, #11
 8008320:	d851      	bhi.n	80083c6 <USBD_CDC_Setup+0x18a>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBD_CDC_Setup+0xec>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008359 	.word	0x08008359
 800832c:	080083d5 	.word	0x080083d5
 8008330:	080083c7 	.word	0x080083c7
 8008334:	080083c7 	.word	0x080083c7
 8008338:	080083c7 	.word	0x080083c7
 800833c:	080083c7 	.word	0x080083c7
 8008340:	080083c7 	.word	0x080083c7
 8008344:	080083c7 	.word	0x080083c7
 8008348:	080083c7 	.word	0x080083c7
 800834c:	080083c7 	.word	0x080083c7
 8008350:	08008383 	.word	0x08008383
 8008354:	080083ad 	.word	0x080083ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b03      	cmp	r3, #3
 8008362:	d107      	bne.n	8008374 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008364:	f107 030a 	add.w	r3, r7, #10
 8008368:	2202      	movs	r2, #2
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fcf3 	bl	8009d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008372:	e032      	b.n	80083da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fc7d 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	75fb      	strb	r3, [r7, #23]
          break;
 8008380:	e02b      	b.n	80083da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b03      	cmp	r3, #3
 800838c:	d107      	bne.n	800839e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800838e:	f107 030d 	add.w	r3, r7, #13
 8008392:	2201      	movs	r2, #1
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fcde 	bl	8009d58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800839c:	e01d      	b.n	80083da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fc68 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	75fb      	strb	r3, [r7, #23]
          break;
 80083aa:	e016      	b.n	80083da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d00f      	beq.n	80083d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fc5b 	bl	8009c76 <USBD_CtlError>
            ret = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083c4:	e008      	b.n	80083d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fc54 	bl	8009c76 <USBD_CtlError>
          ret = USBD_FAIL;
 80083ce:	2303      	movs	r3, #3
 80083d0:	75fb      	strb	r3, [r7, #23]
          break;
 80083d2:	e002      	b.n	80083da <USBD_CDC_Setup+0x19e>
          break;
 80083d4:	bf00      	nop
 80083d6:	e008      	b.n	80083ea <USBD_CDC_Setup+0x1ae>
          break;
 80083d8:	bf00      	nop
      }
      break;
 80083da:	e006      	b.n	80083ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fc49 	bl	8009c76 <USBD_CtlError>
      ret = USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	75fb      	strb	r3, [r7, #23]
      break;
 80083e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32b0      	adds	r2, #176	; 0xb0
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800841a:	2303      	movs	r3, #3
 800841c:	e065      	b.n	80084ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	32b0      	adds	r2, #176	; 0xb0
 8008428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	f003 020f 	and.w	r2, r3, #15
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	3318      	adds	r3, #24
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02f      	beq.n	80084a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 020f 	and.w	r2, r3, #15
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	3318      	adds	r3, #24
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	f003 010f 	and.w	r1, r3, #15
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	460b      	mov	r3, r1
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	440b      	add	r3, r1
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4403      	add	r3, r0
 8008470:	331c      	adds	r3, #28
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	fbb2 f1f3 	udiv	r1, r2, r3
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800847e:	2b00      	cmp	r3, #0
 8008480:	d112      	bne.n	80084a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	f003 020f 	and.w	r2, r3, #15
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3318      	adds	r3, #24
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800849a:	78f9      	ldrb	r1, [r7, #3]
 800849c:	2300      	movs	r3, #0
 800849e:	2200      	movs	r2, #0
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 f92a 	bl	800a6fa <USBD_LL_Transmit>
 80084a6:	e01f      	b.n	80084e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	33b0      	adds	r3, #176	; 0xb0
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d010      	beq.n	80084e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	33b0      	adds	r3, #176	; 0xb0
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	32b0      	adds	r2, #176	; 0xb0
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	32b0      	adds	r2, #176	; 0xb0
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	e01a      	b.n	800855a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 f928 	bl	800a77e <USBD_LL_GetRxDataSize>
 800852e:	4602      	mov	r2, r0
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	33b0      	adds	r3, #176	; 0xb0
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008554:	4611      	mov	r1, r2
 8008556:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32b0      	adds	r2, #176	; 0xb0
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e025      	b.n	80085d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	33b0      	adds	r3, #176	; 0xb0
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01a      	beq.n	80085ce <USBD_CDC_EP0_RxReady+0x6c>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800859e:	2bff      	cmp	r3, #255	; 0xff
 80085a0:	d015      	beq.n	80085ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	33b0      	adds	r3, #176	; 0xb0
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80085ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085c2:	b292      	uxth	r2, r2
 80085c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	22ff      	movs	r2, #255	; 0xff
 80085ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085e0:	2182      	movs	r1, #130	; 0x82
 80085e2:	4818      	ldr	r0, [pc, #96]	; (8008644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085e4:	f000 fd0f 	bl	8009006 <USBD_GetEpDesc>
 80085e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ea:	2101      	movs	r1, #1
 80085ec:	4815      	ldr	r0, [pc, #84]	; (8008644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085ee:	f000 fd0a 	bl	8009006 <USBD_GetEpDesc>
 80085f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085f4:	2181      	movs	r1, #129	; 0x81
 80085f6:	4813      	ldr	r0, [pc, #76]	; (8008644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085f8:	f000 fd05 	bl	8009006 <USBD_GetEpDesc>
 80085fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2210      	movs	r2, #16
 8008608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d006      	beq.n	800861e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008618:	711a      	strb	r2, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800862c:	711a      	strb	r2, [r3, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2243      	movs	r2, #67	; 0x43
 8008636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000050 	.word	0x20000050

08008648 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008650:	2182      	movs	r1, #130	; 0x82
 8008652:	4818      	ldr	r0, [pc, #96]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008654:	f000 fcd7 	bl	8009006 <USBD_GetEpDesc>
 8008658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800865a:	2101      	movs	r1, #1
 800865c:	4815      	ldr	r0, [pc, #84]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800865e:	f000 fcd2 	bl	8009006 <USBD_GetEpDesc>
 8008662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008664:	2181      	movs	r1, #129	; 0x81
 8008666:	4813      	ldr	r0, [pc, #76]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008668:	f000 fccd 	bl	8009006 <USBD_GetEpDesc>
 800866c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2210      	movs	r2, #16
 8008678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2200      	movs	r2, #0
 8008684:	711a      	strb	r2, [r3, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f042 0202 	orr.w	r2, r2, #2
 800868c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d006      	beq.n	80086a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	711a      	strb	r2, [r3, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f042 0202 	orr.w	r2, r2, #2
 80086a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2243      	movs	r2, #67	; 0x43
 80086a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000050 	.word	0x20000050

080086b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086c0:	2182      	movs	r1, #130	; 0x82
 80086c2:	4818      	ldr	r0, [pc, #96]	; (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086c4:	f000 fc9f 	bl	8009006 <USBD_GetEpDesc>
 80086c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ca:	2101      	movs	r1, #1
 80086cc:	4815      	ldr	r0, [pc, #84]	; (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086ce:	f000 fc9a 	bl	8009006 <USBD_GetEpDesc>
 80086d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086d4:	2181      	movs	r1, #129	; 0x81
 80086d6:	4813      	ldr	r0, [pc, #76]	; (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086d8:	f000 fc95 	bl	8009006 <USBD_GetEpDesc>
 80086dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2210      	movs	r2, #16
 80086e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d006      	beq.n	80086fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f8:	711a      	strb	r2, [r3, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d006      	beq.n	8008712 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800870c:	711a      	strb	r2, [r3, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2243      	movs	r2, #67	; 0x43
 8008716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000050 	.word	0x20000050

08008728 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	220a      	movs	r2, #10
 8008734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	2000000c 	.word	0x2000000c

08008748 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	e009      	b.n	8008770 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	33b0      	adds	r3, #176	; 0xb0
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800879e:	2303      	movs	r3, #3
 80087a0:	e008      	b.n	80087b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32b0      	adds	r2, #176	; 0xb0
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e004      	b.n	80087ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32b0      	adds	r2, #176	; 0xb0
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	32b0      	adds	r2, #176	; 0xb0
 800881e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008826:	2303      	movs	r3, #3
 8008828:	e018      	b.n	800885c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7c1b      	ldrb	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008832:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <USBD_CDC_ReceivePacket+0x68>)
 8008834:	7819      	ldrb	r1, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800883c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 ff7b 	bl	800a73c <USBD_LL_PrepareReceive>
 8008846:	e008      	b.n	800885a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <USBD_CDC_ReceivePacket+0x68>)
 800884a:	7819      	ldrb	r1, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008852:	2340      	movs	r3, #64	; 0x40
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 ff71 	bl	800a73c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000094 	.word	0x20000094

08008868 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e01f      	b.n	80088c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 fdeb 	bl	800a490 <USBD_LL_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	e025      	b.n	800892c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32ae      	adds	r2, #174	; 0xae
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00f      	beq.n	800891c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32ae      	adds	r2, #174	; 0xae
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f107 020e 	add.w	r2, r7, #14
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	4602      	mov	r2, r0
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fdf3 	bl	800a528 <USBD_LL_Start>
 8008942:	4603      	mov	r3, r0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008978:	2b00      	cmp	r3, #0
 800897a:	d009      	beq.n	8008990 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	4611      	mov	r1, r2
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	78fa      	ldrb	r2, [r7, #3]
 80089b4:	4611      	mov	r1, r2
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 f90e 	bl	8009c02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d01a      	beq.n	8008a40 <USBD_LL_SetupStage+0x72>
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d822      	bhi.n	8008a54 <USBD_LL_SetupStage+0x86>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <USBD_LL_SetupStage+0x4a>
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d00a      	beq.n	8008a2c <USBD_LL_SetupStage+0x5e>
 8008a16:	e01d      	b.n	8008a54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fb65 	bl	80090f0 <USBD_StdDevReq>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2a:	e020      	b.n	8008a6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fbcd 	bl	80091d4 <USBD_StdItfReq>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3e:	e016      	b.n	8008a6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc2f 	bl	80092ac <USBD_StdEPReq>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
      break;
 8008a52:	e00c      	b.n	8008a6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fdc0 	bl	800a5e8 <USBD_LL_StallEP>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6c:	bf00      	nop
  }

  return ret;
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	460b      	mov	r3, r1
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d16e      	bne.n	8008b6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	f040 8098 	bne.w	8008bd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d913      	bls.n	8008ad8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	1ad2      	subs	r2, r2, r3
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bf28      	it	cs
 8008aca:	4613      	movcs	r3, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f001 f98a 	bl	8009dea <USBD_CtlContinueRx>
 8008ad6:	e07d      	b.n	8008bd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d014      	beq.n	8008b10 <USBD_LL_DataOutStage+0x98>
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d81d      	bhi.n	8008b26 <USBD_LL_DataOutStage+0xae>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <USBD_LL_DataOutStage+0x7c>
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d003      	beq.n	8008afa <USBD_LL_DataOutStage+0x82>
 8008af2:	e018      	b.n	8008b26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	75bb      	strb	r3, [r7, #22]
            break;
 8008af8:	e018      	b.n	8008b2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4619      	mov	r1, r3
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fa64 	bl	8008fd2 <USBD_CoreFindIF>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b0e:	e00d      	b.n	8008b2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	4619      	mov	r1, r3
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 fa66 	bl	8008fec <USBD_CoreFindEP>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75bb      	strb	r3, [r7, #22]
            break;
 8008b24:	e002      	b.n	8008b2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75bb      	strb	r3, [r7, #22]
            break;
 8008b2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b2c:	7dbb      	ldrb	r3, [r7, #22]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d119      	bne.n	8008b66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d113      	bne.n	8008b66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b3e:	7dba      	ldrb	r2, [r7, #22]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	32ae      	adds	r2, #174	; 0xae
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b4e:	7dba      	ldrb	r2, [r7, #22]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b56:	7dba      	ldrb	r2, [r7, #22]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	32ae      	adds	r2, #174	; 0xae
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f001 f950 	bl	8009e0c <USBD_CtlSendStatus>
 8008b6c:	e032      	b.n	8008bd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	4619      	mov	r1, r3
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 fa37 	bl	8008fec <USBD_CoreFindEP>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b82:	7dbb      	ldrb	r3, [r7, #22]
 8008b84:	2bff      	cmp	r3, #255	; 0xff
 8008b86:	d025      	beq.n	8008bd4 <USBD_LL_DataOutStage+0x15c>
 8008b88:	7dbb      	ldrb	r3, [r7, #22]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d122      	bne.n	8008bd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d117      	bne.n	8008bca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b9a:	7dba      	ldrb	r2, [r7, #22]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	32ae      	adds	r2, #174	; 0xae
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00f      	beq.n	8008bca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008baa:	7dba      	ldrb	r2, [r7, #22]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bb2:	7dba      	ldrb	r2, [r7, #22]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	32ae      	adds	r2, #174	; 0xae
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	7afa      	ldrb	r2, [r7, #11]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	4798      	blx	r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	e000      	b.n	8008bd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	460b      	mov	r3, r1
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d16f      	bne.n	8008cd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d15a      	bne.n	8008cb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d914      	bls.n	8008c38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f001 f8b2 	bl	8009d8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f001 fd83 	bl	800a73c <USBD_LL_PrepareReceive>
 8008c36:	e03f      	b.n	8008cb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d11c      	bne.n	8008c7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d316      	bcc.n	8008c7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d20f      	bcs.n	8008c7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f001 f893 	bl	8009d8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f001 fd60 	bl	800a73c <USBD_LL_PrepareReceive>
 8008c7c:	e01c      	b.n	8008cb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d10f      	bne.n	8008caa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008caa:	2180      	movs	r1, #128	; 0x80
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f001 fc9b 	bl	800a5e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f001 f8bd 	bl	8009e32 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d03a      	beq.n	8008d38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fe42 	bl	800894c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cd0:	e032      	b.n	8008d38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cd2:	7afb      	ldrb	r3, [r7, #11]
 8008cd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 f985 	bl	8008fec <USBD_CoreFindEP>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	2bff      	cmp	r3, #255	; 0xff
 8008cea:	d025      	beq.n	8008d38 <USBD_LL_DataInStage+0x15a>
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d122      	bne.n	8008d38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d11c      	bne.n	8008d38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008cfe:	7dfa      	ldrb	r2, [r7, #23]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	32ae      	adds	r2, #174	; 0xae
 8008d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d014      	beq.n	8008d38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d0e:	7dfa      	ldrb	r2, [r7, #23]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d16:	7dfa      	ldrb	r2, [r7, #23]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	32ae      	adds	r2, #174	; 0xae
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	7afa      	ldrb	r2, [r7, #11]
 8008d24:	4611      	mov	r1, r2
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	4798      	blx	r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d2e:	7dbb      	ldrb	r3, [r7, #22]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d34:	7dbb      	ldrb	r3, [r7, #22]
 8008d36:	e000      	b.n	8008d3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d014      	beq.n	8008da8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6852      	ldr	r2, [r2, #4]
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	4611      	mov	r1, r2
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	4798      	blx	r3
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008da8:	2340      	movs	r3, #64	; 0x40
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fbd5 	bl	800a55e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2240      	movs	r2, #64	; 0x40
 8008dc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2180      	movs	r1, #128	; 0x80
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fbc7 	bl	800a55e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2240      	movs	r2, #64	; 0x40
 8008dda:	621a      	str	r2, [r3, #32]

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d006      	beq.n	8008e28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2204      	movs	r2, #4
 8008e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d106      	bne.n	8008e60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d110      	bne.n	8008ea4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32ae      	adds	r2, #174	; 0xae
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e01c      	b.n	8008f0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d115      	bne.n	8008f08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32ae      	adds	r2, #174	; 0xae
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	32ae      	adds	r2, #174	; 0xae
 8008efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4611      	mov	r1, r2
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e01c      	b.n	8008f6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d115      	bne.n	8008f6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32ae      	adds	r2, #174	; 0xae
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00e      	beq.n	8008fc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6852      	ldr	r2, [r2, #4]
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	4611      	mov	r1, r2
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ff8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	429a      	cmp	r2, r3
 800902c:	d920      	bls.n	8009070 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009036:	e013      	b.n	8009060 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009038:	f107 030a 	add.w	r3, r7, #10
 800903c:	4619      	mov	r1, r3
 800903e:	6978      	ldr	r0, [r7, #20]
 8009040:	f000 f81b 	bl	800907a <USBD_GetNextDesc>
 8009044:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b05      	cmp	r3, #5
 800904c:	d108      	bne.n	8009060 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	789b      	ldrb	r3, [r3, #2]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	429a      	cmp	r2, r3
 800905a:	d008      	beq.n	800906e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	b29a      	uxth	r2, r3
 8009066:	897b      	ldrh	r3, [r7, #10]
 8009068:	429a      	cmp	r2, r3
 800906a:	d8e5      	bhi.n	8009038 <USBD_GetEpDesc+0x32>
 800906c:	e000      	b.n	8009070 <USBD_GetEpDesc+0x6a>
          break;
 800906e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009070:	693b      	ldr	r3, [r7, #16]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	881a      	ldrh	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	4413      	add	r3, r2
 8009094:	b29a      	uxth	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090a6:	68fb      	ldr	r3, [r7, #12]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	3301      	adds	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090d2:	8a3b      	ldrh	r3, [r7, #16]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b21a      	sxth	r2, r3
 80090d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090dc:	4313      	orrs	r3, r2
 80090de:	b21b      	sxth	r3, r3
 80090e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090e2:	89fb      	ldrh	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d005      	beq.n	8009116 <USBD_StdDevReq+0x26>
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d857      	bhi.n	80091be <USBD_StdDevReq+0xce>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00f      	beq.n	8009132 <USBD_StdDevReq+0x42>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d153      	bne.n	80091be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32ae      	adds	r2, #174	; 0xae
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
      break;
 8009130:	e04a      	b.n	80091c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b09      	cmp	r3, #9
 8009138:	d83b      	bhi.n	80091b2 <USBD_StdDevReq+0xc2>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <USBD_StdDevReq+0x50>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009195 	.word	0x08009195
 8009144:	080091a9 	.word	0x080091a9
 8009148:	080091b3 	.word	0x080091b3
 800914c:	0800919f 	.word	0x0800919f
 8009150:	080091b3 	.word	0x080091b3
 8009154:	08009173 	.word	0x08009173
 8009158:	08009169 	.word	0x08009169
 800915c:	080091b3 	.word	0x080091b3
 8009160:	0800918b 	.word	0x0800918b
 8009164:	0800917d 	.word	0x0800917d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa3c 	bl	80095e8 <USBD_GetDescriptor>
          break;
 8009170:	e024      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fba1 	bl	80098bc <USBD_SetAddress>
          break;
 800917a:	e01f      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fbe0 	bl	8009944 <USBD_SetConfig>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
          break;
 8009188:	e018      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc83 	bl	8009a98 <USBD_GetConfig>
          break;
 8009192:	e013      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fcb4 	bl	8009b04 <USBD_GetStatus>
          break;
 800919c:	e00e      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fce3 	bl	8009b6c <USBD_SetFeature>
          break;
 80091a6:	e009      	b.n	80091bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd07 	bl	8009bbe <USBD_ClrFeature>
          break;
 80091b0:	e004      	b.n	80091bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fd5e 	bl	8009c76 <USBD_CtlError>
          break;
 80091ba:	bf00      	nop
      }
      break;
 80091bc:	e004      	b.n	80091c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd58 	bl	8009c76 <USBD_CtlError>
      break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop

080091d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d005      	beq.n	80091fa <USBD_StdItfReq+0x26>
 80091ee:	2b40      	cmp	r3, #64	; 0x40
 80091f0:	d852      	bhi.n	8009298 <USBD_StdItfReq+0xc4>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <USBD_StdItfReq+0x26>
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	d14e      	bne.n	8009298 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	2b02      	cmp	r3, #2
 8009206:	d840      	bhi.n	800928a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	889b      	ldrh	r3, [r3, #4]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b01      	cmp	r3, #1
 8009210:	d836      	bhi.n	8009280 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	889b      	ldrh	r3, [r3, #4]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fed9 	bl	8008fd2 <USBD_CoreFindIF>
 8009220:	4603      	mov	r3, r0
 8009222:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2bff      	cmp	r3, #255	; 0xff
 8009228:	d01d      	beq.n	8009266 <USBD_StdItfReq+0x92>
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11a      	bne.n	8009266 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009230:	7bba      	ldrb	r2, [r7, #14]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	32ae      	adds	r2, #174	; 0xae
 8009236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00f      	beq.n	8009260 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009240:	7bba      	ldrb	r2, [r7, #14]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009248:	7bba      	ldrb	r2, [r7, #14]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32ae      	adds	r2, #174	; 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009260:	2303      	movs	r3, #3
 8009262:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009264:	e001      	b.n	800926a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d110      	bne.n	8009294 <USBD_StdItfReq+0xc0>
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10d      	bne.n	8009294 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fdc7 	bl	8009e0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800927e:	e009      	b.n	8009294 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fcf7 	bl	8009c76 <USBD_CtlError>
          break;
 8009288:	e004      	b.n	8009294 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fcf2 	bl	8009c76 <USBD_CtlError>
          break;
 8009292:	e000      	b.n	8009296 <USBD_StdItfReq+0xc2>
          break;
 8009294:	bf00      	nop
      }
      break;
 8009296:	e004      	b.n	80092a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fceb 	bl	8009c76 <USBD_CtlError>
      break;
 80092a0:	bf00      	nop
  }

  return ret;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	889b      	ldrh	r3, [r3, #4]
 80092be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d007      	beq.n	80092dc <USBD_StdEPReq+0x30>
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	f200 817f 	bhi.w	80095d0 <USBD_StdEPReq+0x324>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02a      	beq.n	800932c <USBD_StdEPReq+0x80>
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	f040 817a 	bne.w	80095d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fe83 	bl	8008fec <USBD_CoreFindEP>
 80092e6:	4603      	mov	r3, r0
 80092e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ea:	7b7b      	ldrb	r3, [r7, #13]
 80092ec:	2bff      	cmp	r3, #255	; 0xff
 80092ee:	f000 8174 	beq.w	80095da <USBD_StdEPReq+0x32e>
 80092f2:	7b7b      	ldrb	r3, [r7, #13]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 8170 	bne.w	80095da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092fa:	7b7a      	ldrb	r2, [r7, #13]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009302:	7b7a      	ldrb	r2, [r7, #13]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32ae      	adds	r2, #174	; 0xae
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8163 	beq.w	80095da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009314:	7b7a      	ldrb	r2, [r7, #13]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	; 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800932a:	e156      	b.n	80095da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d008      	beq.n	8009346 <USBD_StdEPReq+0x9a>
 8009334:	2b03      	cmp	r3, #3
 8009336:	f300 8145 	bgt.w	80095c4 <USBD_StdEPReq+0x318>
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 809b 	beq.w	8009476 <USBD_StdEPReq+0x1ca>
 8009340:	2b01      	cmp	r3, #1
 8009342:	d03c      	beq.n	80093be <USBD_StdEPReq+0x112>
 8009344:	e13e      	b.n	80095c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d002      	beq.n	8009358 <USBD_StdEPReq+0xac>
 8009352:	2b03      	cmp	r3, #3
 8009354:	d016      	beq.n	8009384 <USBD_StdEPReq+0xd8>
 8009356:	e02c      	b.n	80093b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <USBD_StdEPReq+0xce>
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b80      	cmp	r3, #128	; 0x80
 8009362:	d00a      	beq.n	800937a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 f93d 	bl	800a5e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f939 	bl	800a5e8 <USBD_LL_StallEP>
 8009376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009378:	e020      	b.n	80093bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fc7a 	bl	8009c76 <USBD_CtlError>
              break;
 8009382:	e01b      	b.n	80093bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	885b      	ldrh	r3, [r3, #2]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10e      	bne.n	80093aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <USBD_StdEPReq+0xfe>
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b80      	cmp	r3, #128	; 0x80
 8009396:	d008      	beq.n	80093aa <USBD_StdEPReq+0xfe>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	88db      	ldrh	r3, [r3, #6]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d104      	bne.n	80093aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f91f 	bl	800a5e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fd2e 	bl	8009e0c <USBD_CtlSendStatus>

              break;
 80093b0:	e004      	b.n	80093bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fc5e 	bl	8009c76 <USBD_CtlError>
              break;
 80093ba:	bf00      	nop
          }
          break;
 80093bc:	e107      	b.n	80095ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d002      	beq.n	80093d0 <USBD_StdEPReq+0x124>
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d016      	beq.n	80093fc <USBD_StdEPReq+0x150>
 80093ce:	e04b      	b.n	8009468 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <USBD_StdEPReq+0x146>
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d00a      	beq.n	80093f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f901 	bl	800a5e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e6:	2180      	movs	r1, #128	; 0x80
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f8fd 	bl	800a5e8 <USBD_LL_StallEP>
 80093ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f0:	e040      	b.n	8009474 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc3e 	bl	8009c76 <USBD_CtlError>
              break;
 80093fa:	e03b      	b.n	8009474 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	885b      	ldrh	r3, [r3, #2]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d136      	bne.n	8009472 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f907 	bl	800a626 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fcf7 	bl	8009e0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fde2 	bl	8008fec <USBD_CoreFindEP>
 8009428:	4603      	mov	r3, r0
 800942a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800942c:	7b7b      	ldrb	r3, [r7, #13]
 800942e:	2bff      	cmp	r3, #255	; 0xff
 8009430:	d01f      	beq.n	8009472 <USBD_StdEPReq+0x1c6>
 8009432:	7b7b      	ldrb	r3, [r7, #13]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11c      	bne.n	8009472 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009438:	7b7a      	ldrb	r2, [r7, #13]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009440:	7b7a      	ldrb	r2, [r7, #13]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	32ae      	adds	r2, #174	; 0xae
 8009446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d010      	beq.n	8009472 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009450:	7b7a      	ldrb	r2, [r7, #13]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32ae      	adds	r2, #174	; 0xae
 8009456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009466:	e004      	b.n	8009472 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc03 	bl	8009c76 <USBD_CtlError>
              break;
 8009470:	e000      	b.n	8009474 <USBD_StdEPReq+0x1c8>
              break;
 8009472:	bf00      	nop
          }
          break;
 8009474:	e0ab      	b.n	80095ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d002      	beq.n	8009488 <USBD_StdEPReq+0x1dc>
 8009482:	2b03      	cmp	r3, #3
 8009484:	d032      	beq.n	80094ec <USBD_StdEPReq+0x240>
 8009486:	e097      	b.n	80095b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <USBD_StdEPReq+0x1f2>
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	2b80      	cmp	r3, #128	; 0x80
 8009492:	d004      	beq.n	800949e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fbed 	bl	8009c76 <USBD_CtlError>
                break;
 800949c:	e091      	b.n	80095c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da0b      	bge.n	80094be <USBD_StdEPReq+0x212>
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	3310      	adds	r3, #16
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	3304      	adds	r3, #4
 80094bc:	e00b      	b.n	80094d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	3304      	adds	r3, #4
 80094d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2202      	movs	r2, #2
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fc37 	bl	8009d58 <USBD_CtlSendData>
              break;
 80094ea:	e06a      	b.n	80095c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da11      	bge.n	8009518 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	f003 020f 	and.w	r2, r3, #15
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	3324      	adds	r3, #36	; 0x24
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d117      	bne.n	800953e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fbb0 	bl	8009c76 <USBD_CtlError>
                  break;
 8009516:	e054      	b.n	80095c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	f003 020f 	and.w	r2, r3, #15
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fb9d 	bl	8009c76 <USBD_CtlError>
                  break;
 800953c:	e041      	b.n	80095c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009542:	2b00      	cmp	r3, #0
 8009544:	da0b      	bge.n	800955e <USBD_StdEPReq+0x2b2>
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	3310      	adds	r3, #16
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4413      	add	r3, r2
 800955a:	3304      	adds	r3, #4
 800955c:	e00b      	b.n	8009576 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <USBD_StdEPReq+0x2d8>
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d103      	bne.n	800958c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	e00e      	b.n	80095aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 f867 	bl	800a664 <USBD_LL_IsStallEP>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e002      	b.n	80095aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2202      	movs	r2, #2
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fbd1 	bl	8009d58 <USBD_CtlSendData>
              break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb5b 	bl	8009c76 <USBD_CtlError>
              break;
 80095c0:	bf00      	nop
          }
          break;
 80095c2:	e004      	b.n	80095ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fb55 	bl	8009c76 <USBD_CtlError>
          break;
 80095cc:	bf00      	nop
      }
      break;
 80095ce:	e005      	b.n	80095dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb4f 	bl	8009c76 <USBD_CtlError>
      break;
 80095d8:	e000      	b.n	80095dc <USBD_StdEPReq+0x330>
      break;
 80095da:	bf00      	nop
  }

  return ret;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	2b06      	cmp	r3, #6
 800960a:	f200 8128 	bhi.w	800985e <USBD_GetDescriptor+0x276>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <USBD_GetDescriptor+0x2c>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009631 	.word	0x08009631
 8009618:	08009649 	.word	0x08009649
 800961c:	08009689 	.word	0x08009689
 8009620:	0800985f 	.word	0x0800985f
 8009624:	0800985f 	.word	0x0800985f
 8009628:	080097ff 	.word	0x080097ff
 800962c:	0800982b 	.word	0x0800982b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
      break;
 8009646:	e112      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7c1b      	ldrb	r3, [r3, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10d      	bne.n	800966c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3301      	adds	r3, #1
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800966a:	e100      	b.n	800986e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
      break;
 8009686:	e0f2      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	885b      	ldrh	r3, [r3, #2]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b05      	cmp	r3, #5
 8009690:	f200 80ac 	bhi.w	80097ec <USBD_GetDescriptor+0x204>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USBD_GetDescriptor+0xb4>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096b5 	.word	0x080096b5
 80096a0:	080096e9 	.word	0x080096e9
 80096a4:	0800971d 	.word	0x0800971d
 80096a8:	08009751 	.word	0x08009751
 80096ac:	08009785 	.word	0x08009785
 80096b0:	080097b9 	.word	0x080097b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	7c12      	ldrb	r2, [r2, #16]
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d6:	e091      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 facb 	bl	8009c76 <USBD_CtlError>
            err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
          break;
 80096e6:	e089      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e077      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fab1 	bl	8009c76 <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e06f      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e05d      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa97 	bl	8009c76 <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e055      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e043      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa7d 	bl	8009c76 <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e03b      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e029      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa63 	bl	8009c76 <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e021      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e00f      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa49 	bl	8009c76 <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e007      	b.n	80097fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa41 	bl	8009c76 <USBD_CtlError>
          err++;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	3301      	adds	r3, #1
 80097f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097fa:	bf00      	nop
      }
      break;
 80097fc:	e037      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	4610      	mov	r0, r2
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009818:	e029      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fa2a 	bl	8009c76 <USBD_CtlError>
        err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
      break;
 8009828:	e021      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7c1b      	ldrb	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	f107 0208 	add.w	r2, r7, #8
 800983e:	4610      	mov	r0, r2
 8009840:	4798      	blx	r3
 8009842:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	2207      	movs	r2, #7
 800984a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800984c:	e00f      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fa10 	bl	8009c76 <USBD_CtlError>
        err++;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3301      	adds	r3, #1
 800985a:	72fb      	strb	r3, [r7, #11]
      break;
 800985c:	e007      	b.n	800986e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa08 	bl	8009c76 <USBD_CtlError>
      err++;
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	3301      	adds	r3, #1
 800986a:	72fb      	strb	r3, [r7, #11]
      break;
 800986c:	bf00      	nop
  }

  if (err != 0U)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d11e      	bne.n	80098b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	88db      	ldrh	r3, [r3, #6]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d016      	beq.n	80098aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800987c:	893b      	ldrh	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00e      	beq.n	80098a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	88da      	ldrh	r2, [r3, #6]
 8009886:	893b      	ldrh	r3, [r7, #8]
 8009888:	4293      	cmp	r3, r2
 800988a:	bf28      	it	cs
 800988c:	4613      	movcs	r3, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	461a      	mov	r2, r3
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa5d 	bl	8009d58 <USBD_CtlSendData>
 800989e:	e009      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f9e7 	bl	8009c76 <USBD_CtlError>
 80098a8:	e004      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 faae 	bl	8009e0c <USBD_CtlSendStatus>
 80098b0:	e000      	b.n	80098b4 <USBD_GetDescriptor+0x2cc>
    return;
 80098b2:	bf00      	nop
  }
}
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop

080098bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	889b      	ldrh	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d131      	bne.n	8009932 <USBD_SetAddress+0x76>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	88db      	ldrh	r3, [r3, #6]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d12d      	bne.n	8009932 <USBD_SetAddress+0x76>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	2b7f      	cmp	r3, #127	; 0x7f
 80098dc:	d829      	bhi.n	8009932 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d104      	bne.n	8009900 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f9bc 	bl	8009c76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fe:	e01d      	b.n	800993c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7bfa      	ldrb	r2, [r7, #15]
 8009904:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fed5 	bl	800a6bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa7a 	bl	8009e0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2202      	movs	r2, #2
 8009922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009926:	e009      	b.n	800993c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009930:	e004      	b.n	800993c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f99e 	bl	8009c76 <USBD_CtlError>
  }
}
 800993a:	bf00      	nop
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	885b      	ldrh	r3, [r3, #2]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	4b4e      	ldr	r3, [pc, #312]	; (8009a94 <USBD_SetConfig+0x150>)
 800995a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800995c:	4b4d      	ldr	r3, [pc, #308]	; (8009a94 <USBD_SetConfig+0x150>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d905      	bls.n	8009970 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f985 	bl	8009c76 <USBD_CtlError>
    return USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	e08c      	b.n	8009a8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d002      	beq.n	8009982 <USBD_SetConfig+0x3e>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d029      	beq.n	80099d4 <USBD_SetConfig+0x90>
 8009980:	e075      	b.n	8009a6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009982:	4b44      	ldr	r3, [pc, #272]	; (8009a94 <USBD_SetConfig+0x150>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d020      	beq.n	80099cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800998a:	4b42      	ldr	r3, [pc, #264]	; (8009a94 <USBD_SetConfig+0x150>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009994:	4b3f      	ldr	r3, [pc, #252]	; (8009a94 <USBD_SetConfig+0x150>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fe ffe1 	bl	8008962 <USBD_SetClassConfig>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f962 	bl	8009c76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099ba:	e065      	b.n	8009a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa25 	bl	8009e0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2203      	movs	r2, #3
 80099c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099ca:	e05d      	b.n	8009a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa1d 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 80099d2:	e059      	b.n	8009a88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099d4:	4b2f      	ldr	r3, [pc, #188]	; (8009a94 <USBD_SetConfig+0x150>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d112      	bne.n	8009a02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099e4:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <USBD_SetConfig+0x150>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <USBD_SetConfig+0x150>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe ffd0 	bl	800899a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa06 	bl	8009e0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a00:	e042      	b.n	8009a88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a02:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d02a      	beq.n	8009a66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe ffbe 	bl	800899a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a1e:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a28:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7fe ff97 	bl	8008962 <USBD_SetClassConfig>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00f      	beq.n	8009a5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f918 	bl	8009c76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fe ffa3 	bl	800899a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a5c:	e014      	b.n	8009a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9d4 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 8009a64:	e010      	b.n	8009a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f9d0 	bl	8009e0c <USBD_CtlSendStatus>
      break;
 8009a6c:	e00c      	b.n	8009a88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f900 	bl	8009c76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <USBD_SetConfig+0x150>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe ff8c 	bl	800899a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	73fb      	strb	r3, [r7, #15]
      break;
 8009a86:	bf00      	nop
  }

  return ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20003d04 	.word	0x20003d04

08009a98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d004      	beq.n	8009ab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f8e2 	bl	8009c76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ab2:	e023      	b.n	8009afc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	dc02      	bgt.n	8009ac6 <USBD_GetConfig+0x2e>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dc03      	bgt.n	8009acc <USBD_GetConfig+0x34>
 8009ac4:	e015      	b.n	8009af2 <USBD_GetConfig+0x5a>
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d00b      	beq.n	8009ae2 <USBD_GetConfig+0x4a>
 8009aca:	e012      	b.n	8009af2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f93c 	bl	8009d58 <USBD_CtlSendData>
        break;
 8009ae0:	e00c      	b.n	8009afc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f934 	bl	8009d58 <USBD_CtlSendData>
        break;
 8009af0:	e004      	b.n	8009afc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8be 	bl	8009c76 <USBD_CtlError>
        break;
 8009afa:	bf00      	nop
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d81e      	bhi.n	8009b5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	88db      	ldrh	r3, [r3, #6]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d004      	beq.n	8009b2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8a5 	bl	8009c76 <USBD_CtlError>
        break;
 8009b2c:	e01a      	b.n	8009b64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f043 0202 	orr.w	r2, r3, #2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	2202      	movs	r2, #2
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f900 	bl	8009d58 <USBD_CtlSendData>
      break;
 8009b58:	e004      	b.n	8009b64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f88a 	bl	8009c76 <USBD_CtlError>
      break;
 8009b62:	bf00      	nop
  }
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d107      	bne.n	8009b8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f940 	bl	8009e0c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b8c:	e013      	b.n	8009bb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d10b      	bne.n	8009bae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	889b      	ldrh	r3, [r3, #4]
 8009b9a:	0a1b      	lsrs	r3, r3, #8
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f930 	bl	8009e0c <USBD_CtlSendStatus>
}
 8009bac:	e003      	b.n	8009bb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f860 	bl	8009c76 <USBD_CtlError>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d80b      	bhi.n	8009bee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d10c      	bne.n	8009bf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f910 	bl	8009e0c <USBD_CtlSendStatus>
      }
      break;
 8009bec:	e004      	b.n	8009bf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f840 	bl	8009c76 <USBD_CtlError>
      break;
 8009bf6:	e000      	b.n	8009bfa <USBD_ClrFeature+0x3c>
      break;
 8009bf8:	bf00      	nop
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	781a      	ldrb	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff fa41 	bl	80090b4 <SWAPBYTE>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fa34 	bl	80090b4 <SWAPBYTE>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff fa27 	bl	80090b4 <SWAPBYTE>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	80da      	strh	r2, [r3, #6]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fcb0 	bl	800a5e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fcac 	bl	800a5e8 <USBD_LL_StallEP>
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d036      	beq.n	8009d1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cb2:	6938      	ldr	r0, [r7, #16]
 8009cb4:	f000 f836 	bl	8009d24 <USBD_GetLen>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	4413      	add	r3, r2
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7812      	ldrb	r2, [r2, #0]
 8009cd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	2203      	movs	r2, #3
 8009ce0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ce8:	e013      	b.n	8009d12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4413      	add	r3, r2
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	613b      	str	r3, [r7, #16]
    idx++;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	4413      	add	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e7      	bne.n	8009cea <USBD_GetString+0x52>
 8009d1a:	e000      	b.n	8009d1e <USBD_GetString+0x86>
    return;
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d34:	e005      	b.n	8009d42 <USBD_GetLen+0x1e>
  {
    len++;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f5      	bne.n	8009d36 <USBD_GetLen+0x12>
  }

  return len;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fcbb 	bl	800a6fa <USBD_LL_Transmit>

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fcaa 	bl	800a6fa <USBD_LL_Transmit>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fcae 	bl	800a73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fc9d 	bl	800a73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2204      	movs	r2, #4
 8009e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fc69 	bl	800a6fa <USBD_LL_Transmit>

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2205      	movs	r2, #5
 8009e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e42:	2300      	movs	r3, #0
 8009e44:	2200      	movs	r2, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fc77 	bl	800a73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4912      	ldr	r1, [pc, #72]	; (8009ea8 <MX_USB_DEVICE_Init+0x50>)
 8009e60:	4812      	ldr	r0, [pc, #72]	; (8009eac <MX_USB_DEVICE_Init+0x54>)
 8009e62:	f7fe fd01 	bl	8008868 <USBD_Init>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e6c:	f7f7 f8e4 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e70:	490f      	ldr	r1, [pc, #60]	; (8009eb0 <MX_USB_DEVICE_Init+0x58>)
 8009e72:	480e      	ldr	r0, [pc, #56]	; (8009eac <MX_USB_DEVICE_Init+0x54>)
 8009e74:	f7fe fd28 	bl	80088c8 <USBD_RegisterClass>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e7e:	f7f7 f8db 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e82:	490c      	ldr	r1, [pc, #48]	; (8009eb4 <MX_USB_DEVICE_Init+0x5c>)
 8009e84:	4809      	ldr	r0, [pc, #36]	; (8009eac <MX_USB_DEVICE_Init+0x54>)
 8009e86:	f7fe fc5f 	bl	8008748 <USBD_CDC_RegisterInterface>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e90:	f7f7 f8d2 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e94:	4805      	ldr	r0, [pc, #20]	; (8009eac <MX_USB_DEVICE_Init+0x54>)
 8009e96:	f7fe fd4d 	bl	8008934 <USBD_Start>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ea0:	f7f7 f8ca 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ea4:	bf00      	nop
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	200000ac 	.word	0x200000ac
 8009eac:	20003d08 	.word	0x20003d08
 8009eb0:	20000018 	.word	0x20000018
 8009eb4:	20000098 	.word	0x20000098

08009eb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4905      	ldr	r1, [pc, #20]	; (8009ed4 <CDC_Init_FS+0x1c>)
 8009ec0:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <CDC_Init_FS+0x20>)
 8009ec2:	f7fe fc5b 	bl	800877c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ec6:	4905      	ldr	r1, [pc, #20]	; (8009edc <CDC_Init_FS+0x24>)
 8009ec8:	4803      	ldr	r0, [pc, #12]	; (8009ed8 <CDC_Init_FS+0x20>)
 8009eca:	f7fe fc79 	bl	80087c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ece:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	200043e4 	.word	0x200043e4
 8009ed8:	20003d08 	.word	0x20003d08
 8009edc:	20003fe4 	.word	0x20003fe4

08009ee0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ee4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
 8009efc:	4613      	mov	r3, r2
 8009efe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	2b23      	cmp	r3, #35	; 0x23
 8009f04:	d84a      	bhi.n	8009f9c <CDC_Control_FS+0xac>
 8009f06:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <CDC_Control_FS+0x1c>)
 8009f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0c:	08009f9d 	.word	0x08009f9d
 8009f10:	08009f9d 	.word	0x08009f9d
 8009f14:	08009f9d 	.word	0x08009f9d
 8009f18:	08009f9d 	.word	0x08009f9d
 8009f1c:	08009f9d 	.word	0x08009f9d
 8009f20:	08009f9d 	.word	0x08009f9d
 8009f24:	08009f9d 	.word	0x08009f9d
 8009f28:	08009f9d 	.word	0x08009f9d
 8009f2c:	08009f9d 	.word	0x08009f9d
 8009f30:	08009f9d 	.word	0x08009f9d
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f9d 	.word	0x08009f9d
 8009f3c:	08009f9d 	.word	0x08009f9d
 8009f40:	08009f9d 	.word	0x08009f9d
 8009f44:	08009f9d 	.word	0x08009f9d
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f9d 	.word	0x08009f9d
 8009f50:	08009f9d 	.word	0x08009f9d
 8009f54:	08009f9d 	.word	0x08009f9d
 8009f58:	08009f9d 	.word	0x08009f9d
 8009f5c:	08009f9d 	.word	0x08009f9d
 8009f60:	08009f9d 	.word	0x08009f9d
 8009f64:	08009f9d 	.word	0x08009f9d
 8009f68:	08009f9d 	.word	0x08009f9d
 8009f6c:	08009f9d 	.word	0x08009f9d
 8009f70:	08009f9d 	.word	0x08009f9d
 8009f74:	08009f9d 	.word	0x08009f9d
 8009f78:	08009f9d 	.word	0x08009f9d
 8009f7c:	08009f9d 	.word	0x08009f9d
 8009f80:	08009f9d 	.word	0x08009f9d
 8009f84:	08009f9d 	.word	0x08009f9d
 8009f88:	08009f9d 	.word	0x08009f9d
 8009f8c:	08009f9d 	.word	0x08009f9d
 8009f90:	08009f9d 	.word	0x08009f9d
 8009f94:	08009f9d 	.word	0x08009f9d
 8009f98:	08009f9d 	.word	0x08009f9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f9c:	bf00      	nop
  }

  return (USBD_OK);
 8009f9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <CDC_Receive_FS+0x24>)
 8009fba:	f7fe fc01 	bl	80087c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fbe:	4804      	ldr	r0, [pc, #16]	; (8009fd0 <CDC_Receive_FS+0x24>)
 8009fc0:	f7fe fc1c 	bl	80087fc <USBD_CDC_ReceivePacket>
	  recieveIntegrationTime = exp;
	  recieveIntegrationTimeFlag = 1;
  }*/


  return (USBD_OK);
 8009fc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20003d08 	.word	0x20003d08

08009fd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
	...

08009ff8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2212      	movs	r2, #18
 800a008:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	200000c8 	.word	0x200000c8

0800a01c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2204      	movs	r2, #4
 800a02c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a02e:	4b03      	ldr	r3, [pc, #12]	; (800a03c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	200000dc 	.word	0x200000dc

0800a040 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d105      	bne.n	800a05e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4907      	ldr	r1, [pc, #28]	; (800a074 <USBD_FS_ProductStrDescriptor+0x34>)
 800a056:	4808      	ldr	r0, [pc, #32]	; (800a078 <USBD_FS_ProductStrDescriptor+0x38>)
 800a058:	f7ff fe1e 	bl	8009c98 <USBD_GetString>
 800a05c:	e004      	b.n	800a068 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	4904      	ldr	r1, [pc, #16]	; (800a074 <USBD_FS_ProductStrDescriptor+0x34>)
 800a062:	4805      	ldr	r0, [pc, #20]	; (800a078 <USBD_FS_ProductStrDescriptor+0x38>)
 800a064:	f7ff fe18 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a068:	4b02      	ldr	r3, [pc, #8]	; (800a074 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	200047e4 	.word	0x200047e4
 800a078:	0800a89c 	.word	0x0800a89c

0800a07c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	6039      	str	r1, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	4904      	ldr	r1, [pc, #16]	; (800a09c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a08c:	4804      	ldr	r0, [pc, #16]	; (800a0a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a08e:	f7ff fe03 	bl	8009c98 <USBD_GetString>
  return USBD_StrDesc;
 800a092:	4b02      	ldr	r3, [pc, #8]	; (800a09c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200047e4 	.word	0x200047e4
 800a0a0:	0800a8b4 	.word	0x0800a8b4

0800a0a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	6039      	str	r1, [r7, #0]
 800a0ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	221a      	movs	r2, #26
 800a0b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0b6:	f000 f843 	bl	800a140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0ba:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	200000e0 	.word	0x200000e0

0800a0c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4907      	ldr	r1, [pc, #28]	; (800a0fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0de:	4808      	ldr	r0, [pc, #32]	; (800a100 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0e0:	f7ff fdda 	bl	8009c98 <USBD_GetString>
 800a0e4:	e004      	b.n	800a0f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	4904      	ldr	r1, [pc, #16]	; (800a0fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ea:	4805      	ldr	r0, [pc, #20]	; (800a100 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0ec:	f7ff fdd4 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200047e4 	.word	0x200047e4
 800a100:	0800a8c8 	.word	0x0800a8c8

0800a104 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a110:	79fb      	ldrb	r3, [r7, #7]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d105      	bne.n	800a122 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4907      	ldr	r1, [pc, #28]	; (800a138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a11a:	4808      	ldr	r0, [pc, #32]	; (800a13c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a11c:	f7ff fdbc 	bl	8009c98 <USBD_GetString>
 800a120:	e004      	b.n	800a12c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	4904      	ldr	r1, [pc, #16]	; (800a138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a126:	4805      	ldr	r0, [pc, #20]	; (800a13c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a128:	f7ff fdb6 	bl	8009c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200047e4 	.word	0x200047e4
 800a13c:	0800a8d4 	.word	0x0800a8d4

0800a140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a146:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <Get_SerialNum+0x44>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a14c:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <Get_SerialNum+0x48>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <Get_SerialNum+0x4c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a166:	2208      	movs	r2, #8
 800a168:	4909      	ldr	r1, [pc, #36]	; (800a190 <Get_SerialNum+0x50>)
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f814 	bl	800a198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a170:	2204      	movs	r2, #4
 800a172:	4908      	ldr	r1, [pc, #32]	; (800a194 <Get_SerialNum+0x54>)
 800a174:	68b8      	ldr	r0, [r7, #8]
 800a176:	f000 f80f 	bl	800a198 <IntToUnicode>
  }
}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	1fff7a10 	.word	0x1fff7a10
 800a188:	1fff7a14 	.word	0x1fff7a14
 800a18c:	1fff7a18 	.word	0x1fff7a18
 800a190:	200000e2 	.word	0x200000e2
 800a194:	200000f2 	.word	0x200000f2

0800a198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75fb      	strb	r3, [r7, #23]
 800a1ae:	e027      	b.n	800a200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0f1b      	lsrs	r3, r3, #28
 800a1b4:	2b09      	cmp	r3, #9
 800a1b6:	d80b      	bhi.n	800a1d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	0f1b      	lsrs	r3, r3, #28
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3230      	adds	r2, #48	; 0x30
 800a1ca:	b2d2      	uxtb	r2, r2
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e00a      	b.n	800a1e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	0f1b      	lsrs	r3, r3, #28
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	440b      	add	r3, r1
 800a1e0:	3237      	adds	r2, #55	; 0x37
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
 800a200:	7dfa      	ldrb	r2, [r7, #23]
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	429a      	cmp	r2, r3
 800a206:	d3d3      	bcc.n	800a1b0 <IntToUnicode+0x18>
  }
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	; 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a220:	f107 0314 	add.w	r3, r7, #20
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	605a      	str	r2, [r3, #4]
 800a22a:	609a      	str	r2, [r3, #8]
 800a22c:	60da      	str	r2, [r3, #12]
 800a22e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a238:	d13a      	bne.n	800a2b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a23a:	2300      	movs	r3, #0
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	4b1e      	ldr	r3, [pc, #120]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	4a1d      	ldr	r2, [pc, #116]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6313      	str	r3, [r2, #48]	; 0x30
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	613b      	str	r3, [r7, #16]
 800a254:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a256:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a25a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a25c:	2302      	movs	r3, #2
 800a25e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a264:	2303      	movs	r3, #3
 800a266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a268:	230a      	movs	r3, #10
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a26c:	f107 0314 	add.w	r3, r7, #20
 800a270:	4619      	mov	r1, r3
 800a272:	4812      	ldr	r0, [pc, #72]	; (800a2bc <HAL_PCD_MspInit+0xa4>)
 800a274:	f7f8 fad0 	bl	8002818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27c:	4a0e      	ldr	r2, [pc, #56]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a282:	6353      	str	r3, [r2, #52]	; 0x34
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28c:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a28e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a292:	6453      	str	r3, [r2, #68]	; 0x44
 800a294:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <HAL_PCD_MspInit+0xa0>)
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	2043      	movs	r0, #67	; 0x43
 800a2a6:	f7f7 fe7e 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2aa:	2043      	movs	r0, #67	; 0x43
 800a2ac:	f7f7 fe97 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2b0:	bf00      	nop
 800a2b2:	3728      	adds	r7, #40	; 0x28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	40020000 	.word	0x40020000

0800a2c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fe fb79 	bl	80089ce <USBD_LL_SetupStage>
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a2f6:	78fa      	ldrb	r2, [r7, #3]
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	4413      	add	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	440b      	add	r3, r1
 800a304:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	4619      	mov	r1, r3
 800a30e:	f7fe fbb3 	bl	8008a78 <USBD_LL_DataOutStage>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	3320      	adds	r3, #32
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	4619      	mov	r1, r3
 800a342:	f7fe fc4c 	bl	8008bde <USBD_LL_DataInStage>
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fd86 	bl	8008e6e <USBD_LL_SOF>
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a372:	2301      	movs	r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	79db      	ldrb	r3, [r3, #7]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d001      	beq.n	800a382 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a37e:	f7f6 fe5b 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a388:	7bfa      	ldrb	r2, [r7, #15]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fd2a 	bl	8008de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fcd2 	bl	8008d42 <USBD_LL_Reset>
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fd25 	bl	8008e06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7adb      	ldrb	r3, [r3, #11]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <HAL_PCD_SuspendCallback+0x48>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <HAL_PCD_SuspendCallback+0x48>)
 800a3e2:	f043 0306 	orr.w	r3, r3, #6
 800a3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	e000ed00 	.word	0xe000ed00

0800a3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fd1b 	bl	8008e3e <USBD_LL_Resume>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fd73 	bl	8008f12 <USBD_LL_IsoOUTIncomplete>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fd2f 	bl	8008eae <USBD_LL_IsoINIncomplete>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fd85 	bl	8008f76 <USBD_LL_DevConnected>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe fd82 	bl	8008f8c <USBD_LL_DevDisconnected>
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d13c      	bne.n	800a51a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4a0:	4a20      	ldr	r2, [pc, #128]	; (800a524 <USBD_LL_Init+0x94>)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	; (800a524 <USBD_LL_Init+0x94>)
 800a4ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <USBD_LL_Init+0x94>)
 800a4b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	; (800a524 <USBD_LL_Init+0x94>)
 800a4ba:	2204      	movs	r2, #4
 800a4bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4be:	4b19      	ldr	r3, [pc, #100]	; (800a524 <USBD_LL_Init+0x94>)
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4c4:	4b17      	ldr	r3, [pc, #92]	; (800a524 <USBD_LL_Init+0x94>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4ca:	4b16      	ldr	r3, [pc, #88]	; (800a524 <USBD_LL_Init+0x94>)
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4d0:	4b14      	ldr	r3, [pc, #80]	; (800a524 <USBD_LL_Init+0x94>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <USBD_LL_Init+0x94>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <USBD_LL_Init+0x94>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4e2:	4b10      	ldr	r3, [pc, #64]	; (800a524 <USBD_LL_Init+0x94>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	; (800a524 <USBD_LL_Init+0x94>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4ee:	480d      	ldr	r0, [pc, #52]	; (800a524 <USBD_LL_Init+0x94>)
 800a4f0:	f7f8 fb16 	bl	8002b20 <HAL_PCD_Init>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4fa:	f7f6 fd9d 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4fe:	2180      	movs	r1, #128	; 0x80
 800a500:	4808      	ldr	r0, [pc, #32]	; (800a524 <USBD_LL_Init+0x94>)
 800a502:	f7f9 fd40 	bl	8003f86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a506:	2240      	movs	r2, #64	; 0x40
 800a508:	2100      	movs	r1, #0
 800a50a:	4806      	ldr	r0, [pc, #24]	; (800a524 <USBD_LL_Init+0x94>)
 800a50c:	f7f9 fcf4 	bl	8003ef8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a510:	2280      	movs	r2, #128	; 0x80
 800a512:	2101      	movs	r1, #1
 800a514:	4803      	ldr	r0, [pc, #12]	; (800a524 <USBD_LL_Init+0x94>)
 800a516:	f7f9 fcef 	bl	8003ef8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200049e4 	.word	0x200049e4

0800a528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f8 fbfd 	bl	8002d3e <HAL_PCD_Start>
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f942 	bl	800a7d4 <USBD_Get_USB_Status>
 800a550:	4603      	mov	r3, r0
 800a552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a554:	7bbb      	ldrb	r3, [r7, #14]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	461a      	mov	r2, r3
 800a56c:	4603      	mov	r3, r0
 800a56e:	70fb      	strb	r3, [r7, #3]
 800a570:	460b      	mov	r3, r1
 800a572:	70bb      	strb	r3, [r7, #2]
 800a574:	4613      	mov	r3, r2
 800a576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a586:	78bb      	ldrb	r3, [r7, #2]
 800a588:	883a      	ldrh	r2, [r7, #0]
 800a58a:	78f9      	ldrb	r1, [r7, #3]
 800a58c:	f7f9 f8d1 	bl	8003732 <HAL_PCD_EP_Open>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f91c 	bl	800a7d4 <USBD_Get_USB_Status>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f9 f91a 	bl	8003802 <HAL_PCD_EP_Close>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f8fd 	bl	800a7d4 <USBD_Get_USB_Status>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7f9 f9d2 	bl	80039b0 <HAL_PCD_EP_SetStall>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 f8de 	bl	800a7d4 <USBD_Get_USB_Status>
 800a618:	4603      	mov	r3, r0
 800a61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a640:	78fa      	ldrb	r2, [r7, #3]
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7f9 fa16 	bl	8003a76 <HAL_PCD_EP_ClrStall>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f8bf 	bl	800a7d4 <USBD_Get_USB_Status>
 800a656:	4603      	mov	r3, r0
 800a658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a676:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	da0b      	bge.n	800a698 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	3316      	adds	r3, #22
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	e00b      	b.n	800a6b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	440b      	add	r3, r1
 800a6aa:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a6ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f9 f805 	bl	80036ea <HAL_PCD_SetAddress>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f874 	bl	800a7d4 <USBD_Get_USB_Status>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	460b      	mov	r3, r1
 800a708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a718:	7af9      	ldrb	r1, [r7, #11]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	f7f9 f90d 	bl	800393c <HAL_PCD_EP_Transmit>
 800a722:	4603      	mov	r3, r0
 800a724:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 f853 	bl	800a7d4 <USBD_Get_USB_Status>
 800a72e:	4603      	mov	r3, r0
 800a730:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a732:	7dbb      	ldrb	r3, [r7, #22]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	607a      	str	r2, [r7, #4]
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	460b      	mov	r3, r1
 800a74a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a75a:	7af9      	ldrb	r1, [r7, #11]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	f7f9 f899 	bl	8003896 <HAL_PCD_EP_Receive>
 800a764:	4603      	mov	r3, r0
 800a766:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f832 	bl	800a7d4 <USBD_Get_USB_Status>
 800a770:	4603      	mov	r3, r0
 800a772:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a774:	7dbb      	ldrb	r3, [r7, #22]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a790:	78fa      	ldrb	r2, [r7, #3]
 800a792:	4611      	mov	r1, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f7f9 f8b9 	bl	800390c <HAL_PCD_EP_GetRxCount>
 800a79a:	4603      	mov	r3, r0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7ac:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <USBD_static_malloc+0x18>)
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20004ec8 	.word	0x20004ec8

0800a7c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]

}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d817      	bhi.n	800a818 <USBD_Get_USB_Status+0x44>
 800a7e8:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <USBD_Get_USB_Status+0x1c>)
 800a7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ee:	bf00      	nop
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a807 	.word	0x0800a807
 800a7f8:	0800a80d 	.word	0x0800a80d
 800a7fc:	0800a813 	.word	0x0800a813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
    break;
 800a804:	e00b      	b.n	800a81e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a806:	2303      	movs	r3, #3
 800a808:	73fb      	strb	r3, [r7, #15]
    break;
 800a80a:	e008      	b.n	800a81e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	e005      	b.n	800a81e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a812:	2303      	movs	r3, #3
 800a814:	73fb      	strb	r3, [r7, #15]
    break;
 800a816:	e002      	b.n	800a81e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a818:	2303      	movs	r3, #3
 800a81a:	73fb      	strb	r3, [r7, #15]
    break;
 800a81c:	bf00      	nop
  }
  return usb_status;
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <memset>:
 800a82c:	4402      	add	r2, r0
 800a82e:	4603      	mov	r3, r0
 800a830:	4293      	cmp	r3, r2
 800a832:	d100      	bne.n	800a836 <memset+0xa>
 800a834:	4770      	bx	lr
 800a836:	f803 1b01 	strb.w	r1, [r3], #1
 800a83a:	e7f9      	b.n	800a830 <memset+0x4>

0800a83c <__libc_init_array>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4d0d      	ldr	r5, [pc, #52]	; (800a874 <__libc_init_array+0x38>)
 800a840:	4c0d      	ldr	r4, [pc, #52]	; (800a878 <__libc_init_array+0x3c>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	2600      	movs	r6, #0
 800a848:	42a6      	cmp	r6, r4
 800a84a:	d109      	bne.n	800a860 <__libc_init_array+0x24>
 800a84c:	4d0b      	ldr	r5, [pc, #44]	; (800a87c <__libc_init_array+0x40>)
 800a84e:	4c0c      	ldr	r4, [pc, #48]	; (800a880 <__libc_init_array+0x44>)
 800a850:	f000 f818 	bl	800a884 <_init>
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	2600      	movs	r6, #0
 800a85a:	42a6      	cmp	r6, r4
 800a85c:	d105      	bne.n	800a86a <__libc_init_array+0x2e>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	f855 3b04 	ldr.w	r3, [r5], #4
 800a864:	4798      	blx	r3
 800a866:	3601      	adds	r6, #1
 800a868:	e7ee      	b.n	800a848 <__libc_init_array+0xc>
 800a86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86e:	4798      	blx	r3
 800a870:	3601      	adds	r6, #1
 800a872:	e7f2      	b.n	800a85a <__libc_init_array+0x1e>
 800a874:	0800a90c 	.word	0x0800a90c
 800a878:	0800a90c 	.word	0x0800a90c
 800a87c:	0800a90c 	.word	0x0800a90c
 800a880:	0800a910 	.word	0x0800a910

0800a884 <_init>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr

0800a890 <_fini>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr
