/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define CCDBuffer 3694 * 1 * 2	//Pixels * lines * bytesplit(aka 16 stored bits / 8 bits sent at a time) (potential for optimization)
volatile uint16_t CCDPixelBuffer[CCDBuffer];
uint8_t Rx_data[20];  // bluetooth-read cmd buffer
uint8_t Rx_dataChar[20];  // bluetooth-read cmd buffer
int integrationDataPointer = 0;
int gettingIntTimeFlag = 0;
int sendStage = 0;
volatile int sendCCDDataFlag = 0;
volatile unsigned long int recieveIntegrationTime;
volatile int recieveIntegrationTimeFlag = 0;

void changeIntegrationTime(TIM_HandleTypeDef* sh, TIM_HandleTypeDef* icg, TIM_HandleTypeDef* mClock, TIM_HandleTypeDef* adcTimer, unsigned long int newTime) {

	//Here we reset and reconfigure the clocks with the new integration time.
	//The next line readout sent may still be set to the last integration time, so on the client
	//application we discard the result directly after changing the integration time, taking the next reading
	//as the accurate first data reading using the new integration time.

	//Notice that the stretch factor is 84/4, with 84 being the clock speed.
	//If you factor out the clock speed (stretchFactor*4), then you'll get the actual timings of the signals
	//The stretchFactor algorithm in place here guarantees the sh and icg signals to be synchronized.
	//There are faster ways to calculate the stretchFactor based on modulus number theory however the overall bottleneck is not the generation of the numbers.
	//There doesn't seem to be any more efficient way to align the icg and sh based on that same number theory, take lcm 4 and 5 for example.
	//There is potential in changing the icgPeriod since it is just a rounded up version of 2*numOfPixels. Any further optimization should follow from that
	//train of thought.

	//Creating sh signals whose periods are cut earlier or later to forcibly synchronize with the icg simply
	//messes up the true integration time. There is a possibility in making a variable period integration, however it seems like
	//that solution only messes up the true integration time.

	unsigned long int stretchFactor = 21; //Must be a min of 21
	unsigned long int icgPeriod = 7500;

	if (newTime % 10000 == 0) {
		icgPeriod = 10000;
		stretchFactor = 21 * (newTime / icgPeriod);
	} else {
		//Original Expression: icgPeriod * (stretchFactor * 4) % (newTime*84) != 0
		while (((icgPeriod *stretchFactor) % (newTime*21)) != 0) {
			stretchFactor++;
		}
	}

	{	//Shift Gate Setup
	  TIM_OC_InitTypeDef sConfigOC = {0};

	  sh->Init.Period = (newTime)*84-1;
	  sConfigOC.Pulse = (4)*84-1;

	  sh->Init.Prescaler = 0;
	  sh->Init.CounterMode = TIM_COUNTERMODE_UP;
	  sh->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  sh->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	  if (HAL_TIM_Base_Init(sh) != HAL_OK) { Error_Handler(); }

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  if (HAL_TIM_PWM_ConfigChannel(sh, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) { Error_Handler(); }
	  HAL_TIM_MspPostInit(sh);

	  HAL_TIM_PWM_Start(sh, TIM_CHANNEL_3);
	}

	{	//Integration Clear Gate Setup - htmi2
		TIM_OC_InitTypeDef sConfigOC = {0};

		icg->Init.Period = (icgPeriod)*(stretchFactor*4) - 1; //(stretchfactor*4) bc factoring
		sConfigOC.Pulse = (10)*84-1;

		icg->Init.Prescaler = 0;
		icg->Init.CounterMode = TIM_COUNTERMODE_UP;
		icg->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
		icg->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
		if (HAL_TIM_Base_Init(icg) != HAL_OK) { Error_Handler(); }
		if (HAL_TIM_Base_Start_IT(icg)) { Error_Handler(); }

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
		if (HAL_TIM_PWM_ConfigChannel(icg, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }

		HAL_TIM_MspPostInit(icg);

		HAL_TIM_PWM_Start(icg, TIM_CHANNEL_1); //PA0 - ICG
	}

	{	//Master Clock Setup
		TIM_OC_InitTypeDef sConfigOC = {0};

		unsigned long int pulse = 1*stretchFactor;

		mClock->Init.Period = (pulse)*2-1;
		sConfigOC.Pulse = (pulse)-1;

		mClock->Init.Prescaler = 0;
		mClock->Init.CounterMode = TIM_COUNTERMODE_UP;
		mClock->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
		mClock->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
		if (HAL_TIM_Base_Init(mClock) != HAL_OK) { Error_Handler(); }

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
		if (HAL_TIM_PWM_ConfigChannel(mClock, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
		HAL_TIM_MspPostInit(mClock);

		HAL_TIM_PWM_Start(mClock, TIM_CHANNEL_1); //PA6 - fM
	}

    {	//Analog to Digital Converter Setup
    	TIM_OC_InitTypeDef sConfigOC = {0};

    	unsigned long int pulse = 1*stretchFactor;

    	adcTimer->Init.Period = (pulse)*8-1;
    	sConfigOC.Pulse = (pulse)-1;

    	adcTimer->Init.Prescaler = 0;
    	adcTimer->Init.CounterMode = TIM_COUNTERMODE_UP;
    	adcTimer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    	adcTimer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    	if (HAL_TIM_Base_Init(adcTimer) != HAL_OK) { Error_Handler(); }

    	sConfigOC.OCMode = TIM_OCMODE_PWM1;
    	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    	if (HAL_TIM_PWM_ConfigChannel(adcTimer, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); }

    	  HAL_TIM_PWM_Start(adcTimer, TIM_CHANNEL_4);
    }


	  __HAL_TIM_SET_COUNTER(adcTimer, 0);
	  __HAL_TIM_SET_COUNTER(mClock, 0);
	  __HAL_TIM_SET_COUNTER(icg, 66);
	  __HAL_TIM_SET_COUNTER(sh, 0);
  }

//Specifically at the beginning of the icg timer's period: reset all clocks (for stability, they should be aligned)
void TIM2_IRQHandler() { HAL_TIM_IRQHandler(&htim2); }

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	HAL_TIM_Base_Stop(&htim3);
	HAL_TIM_Base_Stop(&htim4);
	HAL_TIM_Base_Stop(&htim5);
	HAL_TIM_Base_Stop_IT(&htim2);

	if (sendCCDDataFlag == 2) {
		sendCCDDataFlag = 3;
	}

	if (sendStage == 6) { sendStage = 2; }
	if (sendStage >= 7) { sendStage = 0; }

	if (recieveIntegrationTimeFlag == 1) { recieveIntegrationTimeFlag = 2; }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM3_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_ADC1_Init();
  MX_USB_DEVICE_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
  __HAL_TIM_SET_COUNTER(&htim2, 66); //600 ns delay
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //PA2 - SH

  HAL_UART_Receive_IT(&huart1, Rx_dataChar, 20);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  changeIntegrationTime(&htim5, &htim2, &htim3, &htim4, 20);
  while (1)
  {


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (sendCCDDataFlag == 1) {
			changeIntegrationTime(&htim5, &htim2, &htim3, &htim4, recieveIntegrationTime);
			sendCCDDataFlag = 2;

		}



	  if (sendCCDDataFlag == 3) { //sendStage == 2 || sendStage == 1

		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
		  sendCCDDataFlag = 0;
//		  sendStage += 5;
	  }

	  if (recieveIntegrationTimeFlag == 2) {
		  changeIntegrationTime(&htim5, &htim2, &htim3, &htim4, recieveIntegrationTime);
		  recieveIntegrationTimeFlag = 0;
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 630000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 840-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 42-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 21-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 168-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 42-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1680-1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 336-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);

}


/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;


  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART1_IRQn);




  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


void transmit_CCD_Data_BLE() {

	int size = 60;

	if (sendStage * size >= CCDBuffer - 100) {
		size = sendStage * size - CCDBuffer;
	}

	//uint16_t* start = CCDPixelBuffer + sendStage * size;

//	HAL_UART_Transmit_IT(&huart1, (uint8_t*)start, size);


	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)CCDPixelBuffer, CCDBuffer);
}

//There is a potential in the case that a bit is lost in transmission that the CCD will cease to respond until the buffer is properly restored
//This will only occur if 19 bits in total are lost or if the CCD is turned off and on again
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (Rx_dataChar[0] == 's' && sendCCDDataFlag == 0) {
	  sendCCDDataFlag = 1;
	}

	if (Rx_dataChar[0] == 'e') {
		  unsigned long int exp = 0;
		  for (int i = 1; i < 20 && Rx_dataChar[i] != '\0'; i++) {
			  exp *= 10;
			  exp += (Rx_dataChar[i]) - '0';
			  Rx_dataChar[i] = '\0';
		  }
		  recieveIntegrationTime = exp;
		  recieveIntegrationTimeFlag = 1;
		  Rx_dataChar[0] = '\0';
	}

	HAL_UART_Receive_IT(&huart1, Rx_dataChar, 20);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	//sendStage++;
	//sendStage = sendStage % divisions;
	//HAL_Delay(500);

}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{

	  //HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //PA6 - fM
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //ADC
	  //HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //PA0 - ICG
	  //HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3); //PA2 - SH


	//CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);

	//uint16_t someBuff[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
	//HAL_UART_Transmit(&huart1, (uint8_t*)someBuff, 12*2, 100);


	//transmit_CCD_Data_BLE();


	HAL_UART_Transmit(&huart1, (uint8_t*)CCDPixelBuffer, CCDBuffer, 1000);

	//sendCCDDataFlag = 0;
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
